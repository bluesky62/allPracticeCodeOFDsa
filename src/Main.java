import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.*;

// import jawtsa.security.KeyStore.Entry;
// import jawtsa.util.Arrays;
// import jawtsa.util.Collections;
// import jawtsa.util.HashMap;

// import com.sun.jawtsafx.collections.MappingChange.Map;

// // import java.security.KeyStore.Entry;
// // import java.util.ArrayList;
// // import java.util.Arrays;
// // import java.util.Collection;
// // import java.util.Collections;
// // import java.util.HashMap;
// // import java.util.HashSet;
// // import java.util.List;
// // import java.util.Map;
// // import java.util.Set;

// // // // // // // import org.w3c.dom.css.Counter;

// // // // // // // // // // // import java.util.pricesayList;
// // // // // // // // // // // import java.util.pricesays;

// // // // // // // // // // // import javax.naming.spi.DirStateFactory.Result;
// // // // // // // // // // // import javax.swing.text.Position;

// // // // // // // // // // // import javafx.event.Event;
// // // // // // // // // // // import javafx.geometry.Pos;

// // // // // // // // // // // // import java.util.Arrays;

// // // // // // // // // // // // // // import java.util.Scanner;

// // // // // // // // // // // // // // // import java.io.BufferedReader;
// // // // // // // // // // // // // // // import java.io.InputStreamReader;
// // // // // // // // // // // // // // // import java.util.Scanner;

// // // // // // // // // // // // // // // // // import java.util.Scanner;

// // // // // // // // // // // // // // // // // // import java.util.Scanner;

// // // // // // // // // // // // // // // // // // // // import java.util.Scanner;

// // // // // // // // // // // // // // // // // // // // // import java.util.Scanner;

// // // // // // // // // // // // // // // // // // // // // // import org.omg.SendingContext.RunTime;

// // // // // // // // // // // // // // // // // // // // // // import java.util.Scanner;

// // // // // // // // // // // // // // // // // // // // // // // import java.util.ArrayList;
// // // // // // // // // // // // // // // // // // // // // // // import java.util.Arrays;
// // // // // // // // // // // // // // // // // // // // // // // import java.util.HashSet;
// // // // // // // // // // // // // // // // // // // // // // // import java.util.Iterator;

// // // // // // // // // // // // // // // // // // // // // // // import org.w3c.dom.css.Counter;

// // // // // // // // // // // // // // // // // // // // // // // // import java.util.Scanner;

// // // // // // // // // // // // // // // // // // // // // // // // import javafx.scene.transform.Scale;

// // // // // // // // // // // // // // // // // // // // // // // // // // import java.util.Scanner;

// // // // // // // // // // // // // // // // // // // // // // // // // // public class App {

// // // // // // // // // // // // // // // // // // // // // // // // // //     static int rec(int N){
// // // // // // // // // // // // // // // // // // // // // // // // // // 		if (N == 1 ){
// // // // // // // // // // // // // // // // // // // // // // // // // // 			return 1;
// // // // // // // // // // // // // // // // // // // // // // // // // // 		}
// // // // // // // // // // // // // // // // // // // // // // // // // // 		else{
// // // // // // // // // // // // // // // // // // // // // // // // // // 			return rec(N-1);
// // // // // // // // // // // // // // // // // // // // // // // // // // 		}
// // // // // // // // // // // // // // // // // // // // // // // // // // 	}

// // // // // // // // // // // // // // // // // // // // // // // // // // 	public static void main (String[] args) {
// // // // // // // // // // // // // // // // // // // // // // // // // //                       try (// Your code here
// // // // // // // // // // // // // // // // // // // // // // // // // //                     Scanner sc = new Scanner(System.in)) {
// // // // // // // // // // // // // // // // // // // // // // // // // //                         int N = sc.nextInt();
// // // // // // // // // // // // // // // // // // // // // // // // // //                           System.out.println(rec(N));
// // // // // // // // // // // // // // // // // // // // // // // // // //                     }
// // // // // // // // // // // // // // // // // // // // // // // // // // 	}

// // // // // // // // // // // // // // // // // // // // // // // // // // //     public static void main(String[] args) throws Exception {

// // // // // // // // // // // // // // // // // // // // // // // // // //  /*         taking input in sigle line and print the output

// // // // // // // // // // // // // // // // // // // // // // // // // //  */

// // // // // // // // // // // // // // // // // // // // // // // // // // // public static void main(String[] args) {

// // // // // // // // // // // // // // // // // // // // // // // // // // //     Scanner scanner = new Scanner(System.in);
// // // // // // // // // // // // // // // // // // // // // // // // // // //     String st[]= scanner.nextLine().split(" ");

// // // // // // // // // // // // // // // // // // // // // // // // // // //     for(int l =0 ;l < s.length;l++){
// // // // // // // // // // // // // // // // // // // // // // // // // // //          int arr = Integer.parseInt(s[l]);
// // // // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // // // //     System.out.println();
// // // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // 

// // // // // // // // // // // // // // // // // // // // // // // // // //         // for (int l = 1; i<=32; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     for (int r = 31; j>=i; j--){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //         System.out.print(" ");
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     }

// // // // // // // // // // // // // // // // // // // // // // // // // //         //     for (int k = 1; k<=i; k++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //         System.out.print("*");
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     }   
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     System.out.println();
// // // // // // // // // // // // // // // // // // // // // // // // // //         // }
// // // // // // // // // // // // // // // // // // // // // // // // // //         // for (int i = 1; i<=32; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     for (int j = 1; j<=i; j++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //         System.out.print(" ");
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     }
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     for (int k = 31; k>=i; k--){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //         System.out.print("*");

// // // // // // // // // // // // // // // // // // // // // // // // // //         //     }
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     System.out.println();

// // // // // // // // // // // // // // // // // // // // // // // // // //         // }

// // // // // // // // // // // // // // // // // // // // // // // // // // // star patthern

// // // // // // // // // // // // // // // // // // // // // // // // // //     //   _****
// // // // // // // // // // // // // // // // // // // // // // // // // //     //   __***
// // // // // // // // // // // // // // // // // // // // // // // // // //     //   ___**
// // // // // // // // // // // // // // // // // // // // // // // // // //     //   ____*

// // // // // // // // // // // // // // // // // // // // // // // // // //         // for (int i = 1; i<=4; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     for (int j = 1; j <=i; j ++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //         System.out.print("_");      // sapce print first
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     }

// // // // // // // // // // // // // // // // // // // // // // // // // //         //     for (int k = 4; k>=i; k--){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     System.out.print("*");          // then print star

// // // // // // // // // // // // // // // // // // // // // // // // // //         // }System.out.println();

// // // // // // // // // // // // // // // // // // // // // // // // // //         // star pattern 
// // // // // // // // // // // // // // // // // // // // // // // // // //     //      *
// // // // // // // // // // // // // // // // // // // // // // // // // //     //     **
// // // // // // // // // // // // // // // // // // // // // // // // // //     //    ***
// // // // // // // // // // // // // // // // // // // // // // // // // //     //   ****

// // // // // // // // // // // // // // // // // // // // // // // // // //     //     for (int i = 1; i<=4; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // //     //         for (int j = 3; j >=i; j --){
// // // // // // // // // // // // // // // // // // // // // // // // // //     //             System.out.print(" ");      // sapce print first
// // // // // // // // // // // // // // // // // // // // // // // // // //     //         }

// // // // // // // // // // // // // // // // // // // // // // // // // //     //         for (int k = 1; k<=i; k++){
// // // // // // // // // // // // // // // // // // // // // // // // // //     //         System.out.print("*");          // then print star

// // // // // // // // // // // // // // // // // // // // // // // // // //     //     }System.out.println();

// // // // // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // // // // //         //star pattern  *
// // // // // // // // // // // // // // // // // // // // // // // // // // //                      **
// // // // // // // // // // // // // // // // // // // // // // // // // // //                      ***
// // // // // // // // // // // // // // // // // // // // // // // // // // //                      **
// // // // // // // // // // // // // // // // // // // // // // // // // // //                      *
// // // // // // // // // // // // // // // // // // // // // // // // // // //

// // // // // // // // // // // // // // // // // // // // // // // // // //         // for (int i = 1; i<=4; i ++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     for (int j = 1; j<=i; j++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //         System.out.print("*");

// // // // // // // // // // // // // // // // // // // // // // // // // //         //     }System.out.println();

// // // // // // // // // // // // // // // // // // // // // // // // // //         // }
// // // // // // // // // // // // // // // // // // // // // // // // // //         // for (int i = 1; i<=4; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     for (int j = 3; j>=i; j --){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //         System.out.print("*");

// // // // // // // // // // // // // // // // // // // // // // // // // //         //     }System.out.println();
// // // // // // // // // // // // // // // // // // // // // // // // // //         // }

// // // // // // // // // // // // // // // // // // // // // // // // // //         // star pattern program *
// // // // // // // // // // // // // // // // // // // // // // // // // //         //                      **
// // // // // // // // // // // // // // // // // // // // // // // // // //         //                      ***

// // // // // // // // // // // // // // // // // // // // // // // // // //         // for (int i = 1; i<=4; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     for (int j = 1; j<=i; j++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //         System.out.print("*");
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     }
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     System.out.println();
// // // // // // // // // // // // // // // // // // // // // // // // // //         // }

// // // // // // // // // // // // // // // // // // // // // // // // // //         // print star pattern reverse order

// // // // // // // // // // // // // // // // // // // // // // // // // //         // for (int i = 1; i<=4; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     for (int j = 4; j>=i; j--){
// // // // // // // // // // // // // // // // // // // // // // // // // //         //         System.out.print("*");
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     }
// // // // // // // // // // // // // // // // // // // // // // // // // //         //     System.out.println();
// // // // // // // // // // // // // // // // // // // // // // // // // //         // }

// // // // // // // // // // // // // // // // // // // // // // // // // //         // amstrong number find using for loop
// // // // // // // // // // // // // // // // // // // // // // // // // // //         int no = 123;
// // // // // // // // // // // // // // // // // // // // // // // // // // //         int t1 = no;
// // // // // // // // // // // // // // // // // // // // // // // // // // //         int leng = 0;

// // // // // // // // // // // // // // // // // // // // // // // // // // //         while(t1 != 0){

// // // // // // // // // // // // // // // // // // // // // // // // // // //             leng = leng +1;
// // // // // // // // // // // // // // // // // // // // // // // // // // //             t1 = t1 /10;

// // // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // // //         int t2=no;
// // // // // // // // // // // // // // // // // // // // // // // // // // //         int arm = 0;
// // // // // // // // // // // // // // // // // // // // // // // // // // //         while(t2!=0){
// // // // // // // // // // // // // // // // // // // // // // // // // // //             int mul = 1;
// // // // // // // // // // // // // // // // // // // // // // // // // // //             int rem = t2%2;
// // // // // // // // // // // // // // // // // // // // // // // // // // //             for (int i=1; i<= leng; i++){
// // // // // // // // // // // // // // // // // // // // // // // // // // //                 mul = mul * rem;

// // // // // // // // // // // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // // // // // // // // // // //             arm = arm + mul;
// // // // // // // // // // // // // // // // // // // // // // // // // // //             t2 = t2/10;

// // // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // // //         if (arm == no){
// // // // // // // // // // // // // // // // // // // // // // // // // // //             System.out.println(no + "is the armstrong number");

// // // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // // //         else{
// // // // // // // // // // // // // // // // // // // // // // // // // // //             System.out.println(no + "not the armstrong number");
// // // // // // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // // // // // //         // int remider = 0, number = 121, temp = number, rev = 0;

// // // // // // // // // // // // // // // // // // // // // // // // // // //         // while (number!= 0){
// // // // // // // // // // // // // // // // // // // // // // // // // // //         //     remider = number % 10;
// // // // // // // // // // // // // // // // // // // // // // // // // // //         //     rev = rev * 10 + remider;
// // // // // // // // // // // // // // // // // // // // // // // // // // //         //     number = temp / 10;

// // // // // // // // // // // // // // // // // // // // // // // // // // //         // }
// // // // // // // // // // // // // // // // // // // // // // // // // // //         // if(number == rev){
// // // // // // // // // // // // // // // // // // // // // // // // // // //         //     System.out.println("this is the paradome number" + number);

// // // // // // // // // // // // // // // // // // // // // // // // // // //         // }
// // // // // // // // // // // // // // // // // // // // // // // // // // //         // else{
// // // // // // // // // // // // // // // // // // // // // // // // // // //         //     System.out.println("this is not paradome number" + number);
// // // // // // // // // // // // // // // // // // // // // // // // // // //         // }

// // // // // // // // // // // // // // // // // // // // // // // // // import java.util.Scanner;

// // // // // // // // // // // // // // // // // // // // // // // // // class Main {

// // // // // // // // // // // // // // // // // // // // // // // // // 	// public static void toh(int N, int t1, int t2, int t3) {
// // // // // // // // // // // // // // // // // // // // // // // // //     //     if(N==0){
// // // // // // // // // // // // // // // // // // // // // // // // //     //         return;

// // // // // // // // // // // // // // // // // // // // // // // // //     //     }
// // // // // // // // // // // // // // // // // // // // // // // // //     //     toh(N-1, t1, t3, t2);
// // // // // // // // // // // // // // // // // // // // // // // // //     //     toh(N-1, t3, t2, t1);
// // // // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // // // // 	// public static void main (String[] args) {
// // // // // // // // // // // // // // // // // // // // // // // // //     //                 Scanner sc = new Scanner(System.in);
// // // // // // // // // // // // // // // // // // // // // // // // //     //                 int N = sc.nextInt();
// // // // // // // // // // // // // // // // // // // // // // // // //     //                 int t1 = sc.nextInt();
// // // // // // // // // // // // // // // // // // // // // // // // //     //                 int t2 = sc.nextInt();
// // // // // // // // // // // // // // // // // // // // // // // // //     //                 int t3 = sc.nextInt();
// // // // // // // // // // // // // // // // // // // // // // // // //     //                 toh(N, t1, t2, t3);

// // // // // // // // // // // // // // // // // // // // // // // // // 	// }

// // // // // // // // // // // // // // // // // // // // // // // // //     public static void palidrome(int n){

// // // // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // // // //     public static void main(String[] args){
// // // // // // // // // // // // // // // // // // // // // // // // // //         int res = 0; int n =5;
// // // // // // // // // // // // // // // // // // // // // // // // // //         while (n!=0) {
// // // // // // // // // // // // // // // // // // // // // // // // // //             res = res*10+n%10;
// // // // // // // // // // // // // // // // // // // // // // // // // //             n = n/10;
// // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // //         if (res == n){
// // // // // // // // // // // // // // // // // // // // // // // // // //             System.out.println(true);
// // // // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // // // //         else{
// // // // // // // // // // // // // // // // // // // // // // // // // //             System.out.println(res);
// // // // // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // //             int n, r, sum;
// // // // // // // // // // // // // // // // // // // // // // // // //             while(n>9){

// // // // // // // // // // // // // // // // // // // // // // // // //                 sum = 0;
// // // // // // // // // // // // // // // // // // // // // // // // //                 while(n>0){

// // // // // // // // // // // // // // // // // // // // // // // // //                     r = n%10;
// // // // // // // // // // // // // // // // // // // // // // // // //                     n = n/10;
// // // // // // // // // // // // // // // // // // // // // // // // //                     sum = sum + r;

// // // // // // // // // // // // // // // // // // // // // // // // //                 }
// // // // // // // // // // // // // // // // // // // // // // // // //                 n = sum;

// // // // // // // // // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // // // // // // // // //             System.out.println(sum);
// // // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // public class App {
// // // // // // // // // // // // // // // // // // // // // // // //     public static void main(String[] args) {
// // // // // // // // // // // // // // // // // // // // // // // //         Scanner sc = new Scanner(System.in);
// // // // // // // // // // // // // // // // // // // // // // // //         String str = sc.next();

// // // // // // // // // // // // // // // // // // // // // // // //         int[] dp = new int[str.length()];
// // // // // // // // // // // // // // // // // // // // // // // //         dp[0] = 1;

// // // // // // // // // // // // // // // // // // // // // // // //         for (int i = 1; i < dp.length; i++) {
// // // // // // // // // // // // // // // // // // // // // // // //             if (str.charAt(i - 1) == '0' && str.charAt(i) == '0') {
// // // // // // // // // // // // // // // // // // // // // // // //                 dp[i] = 0;

// // // // // // // // // // // // // // // // // // // // // // // //             } else if (str.charAt(i - 1) == '0' && str.charAt(i) != '0') {
// // // // // // // // // // // // // // // // // // // // // // // //                 dp[i] = dp[i - 1];

// // // // // // // // // // // // // // // // // // // // // // // //             } else if (str.charAt(i - 1) != '0' && str.charAt(i) == '0') {
// // // // // // // // // // // // // // // // // // // // // // // //                 if (str.charAt(i - 1) == '1' && str.charAt(i) == '0') {
// // // // // // // // // // // // // // // // // // // // // // // //                     dp[i] = (i >= 2 ? dp[i - 2] : 1);
// // // // // // // // // // // // // // // // // // // // // // // //                 } else {
// // // // // // // // // // // // // // // // // // // // // // // //                     dp[i] = 0;

// // // // // // // // // // // // // // // // // // // // // // // //                 }
// // // // // // // // // // // // // // // // // // // // // // // //             } else {
// // // // // // // // // // // // // // // // // // // // // // // //                 if (Integer.parseInt(str.substring(i - 1, i + 1)) <= 26) {
// // // // // // // // // // // // // // // // // // // // // // // //                     dp[i] = dp[i - 1] + (i >= 2 ? dp[i - 2] : 1);

// // // // // // // // // // // // // // // // // // // // // // // //                 } else {
// // // // // // // // // // // // // // // // // // // // // // // //                     dp[i] = dp[i - 1];
// // // // // // // // // // // // // // // // // // // // // // // //                 }
// // // // // // // // // // // // // // // // // // // // // // // //             }

// // // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // // //         System.out.println(dp[str.length() - 1]);
// // // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // // // 

// // // // // // // // // // // // // // // // // // // // // // // class App {

// // // // // // // // // // // // // // // // // // // // // // //     static boolean checkIfSortRotated(int arr[], int n) {

// // // // // // // // // // // // // // // // // // // // // // //         int x = 0, y = 0;

// // // // // // // // // // // // // // // // // // // // // // //         // Traversing array 0 to last element.
// // // // // // // // // // // // // // // // // // // // // // //         // n-1 is taken as we used i+1.
// // // // // // // // // // // // // // // // // // // // // // //         for (int i = 0; i < n - 1; i++) {
// // // // // // // // // // // // // // // // // // // // // // //             if (arr[i] < arr[i + 1])
// // // // // // // // // // // // // // // // // // // // // // //                 x++;
// // // // // // // // // // // // // // // // // // // // // // //             else
// // // // // // // // // // // // // // // // // // // // // // //                 y++;
// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         // If till now both x,y are greater
// // // // // // // // // // // // // // // // // // // // // // //         // then 1 means array is not sorted.
// // // // // // // // // // // // // // // // // // // // // // //         // If both any of x,y is zero means
// // // // // // // // // // // // // // // // // // // // // // //         // array is not rotated.
// // // // // // // // // // // // // // // // // // // // // // //         if (x == 1 || y == 1) {
// // // // // // // // // // // // // // // // // // // // // // //             // Checking for last element with first.
// // // // // // // // // // // // // // // // // // // // // // //             if (arr[n - 1] < arr[0]) {
// // // // // // // // // // // // // // // // // // // // // // //                 x++;
// // // // // // // // // // // // // // // // // // // // // // //             } else {
// // // // // // // // // // // // // // // // // // // // // // //                 y++;
// // // // // // // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // // // // // // //             // Checking for final result.
// // // // // // // // // // // // // // // // // // // // // // //             if (x == 1 || y == 1) {
// // // // // // // // // // // // // // // // // // // // // // //                 return true;
// // // // // // // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // // //         // If still not true then definitely false.
// // // // // // // // // // // // // // // // // // // // // // //         return false;

// // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // //     public static void main(String[] args) {
// // // // // // // // // // // // // // // // // // // // // // //         // Your code here

// // // // // // // // // // // // // // // // // // // // // // //         Scanner sc = new Scanner(System.in);
// // // // // // // // // // // // // // // // // // // // // // //         int n = sc.nextInt();
// // // // // // // // // // // // // // // // // // // // // // //         int arr[] = new int[n];
// // // // // // // // // // // // // // // // // // // // // // //         for (int i = 0; i < n; i++) {
// // // // // // // // // // // // // // // // // // // // // // //             // for reading array
// // // // // // // // // // // // // // // // // // // // // // //             arr[i] = sc.nextInt();

// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //         for (int i : arr) { // for printing array

// // // // // // // // // // // // // // // // // // // // // // //             // System.out.println(i);
// // // // // // // // // // // // // // // // // // // // // // //             checkIfSortRotated(arr, n);

// // // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // //     // static void checkIfSortRotated(int arr[], int n ){

// // // // // // // // // // // // // // // // // // // // // // //     // int minEle = Integer.MAX_VALUE;
// // // // // // // // // // // // // // // // // // // // // // //     // int MaxEle = Integer.MIN_VALUE;

// // // // // // // // // // // // // // // // // // // // // // //     // int minIndex = -1;

// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < n; i++) {

// // // // // // // // // // // // // // // // // // // // // // //     // if(arr[i] < minEle){
// // // // // // // // // // // // // // // // // // // // // // //     // minEle = arr[i];
// // // // // // // // // // // // // // // // // // // // // // //     // minIndex = i;

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // boolean flag1 = true;

// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 1; i < minIndex; i++) {

// // // // // // // // // // // // // // // // // // // // // // //     // if (a[i] <arr[i-1]) {
// // // // // // // // // // // // // // // // // // // // // // //     // flag1 = false;
// // // // // // // // // // // // // // // // // // // // // // //     // break;

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // boolean flag2 = true;

// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = minIndex+ 1; i < n; i++) {

// // // // // // // // // // // // // // // // // // // // // // //     // if (arr[i]< arr[i - 1]) {
// // // // // // // // // // // // // // // // // // // // // // //     // flag2 = true;
// // // // // // // // // // // // // // // // // // // // // // //     // break;
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // if (minIndex == 0){
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.print("NO");
// // // // // // // // // // // // // // // // // // // // // // //     // return;
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // if (flag1 && flag2 && (arr[n-1]<arr[0])) {

// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println("YES");

// // // // // // // // // // // // // // // // // // // // // // //     // } else {

// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println("NO");

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // public static void main(String[] args) {
// // // // // // // // // // // // // // // // // // // // // // //     // int[][][] a={{{10,320,30,425,105},{10,6,2},{50,1,5,42,6}}};
// // // // // // // // // // // // // // // // // // // // // // //     // // for (int i:a){
// // // // // // // // // // // // // // // // // // // // // // //     // // System.out.println(i);
// // // // // // // // // // // // // // // // // // // // // // //     // // }
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i<=a.length; i++){
// // // // // // // // // // // // // // // // // // // // // // //     // for (int j = 0; j<a[i].length; j++){
// // // // // // // // // // // // // // // // // // // // // // //     // for (int k = 0; k<a[i][j].length; k++){
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(a[i][j][k]);
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println();
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println();
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a = {0,1,2,4,5};
// // // // // // // // // // // // // // // // // // // // // // //     // int temp;
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i<a.length; i++){
// // // // // // // // // // // // // // // // // // // // // // //     // int flag = 0;
// // // // // // // // // // // // // // // // // // // // // // //     // for (int j=0; j<a.length-1-i; j++){
// // // // // // // // // // // // // // // // // // // // // // //     // if (a[j]>a[j+1]){
// // // // // // // // // // // // // // // // // // // // // // //     // temp = a[j];
// // // // // // // // // // // // // // // // // // // // // // //     // a[j] = a[j+1];
// // // // // // // // // // // // // // // // // // // // // // //     // a[j+1] = temp;
// // // // // // // // // // // // // // // // // // // // // // //     // flag = 1;
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // if(flag == 0){
// // // // // // // // // // // // // // // // // // // // // // //     // break;
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i<a.length; i++){
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(a[i]+ "");

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // bubble sort string

// // // // // // // // // // // // // // // // // // // // // // //     // String[] a = {"zear", "aksah", "ajit", "rahu", "bagyi"};
// // // // // // // // // // // // // // // // // // // // // // //     // String temp;
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i<a.length; i++){
// // // // // // // // // // // // // // // // // // // // // // //     // int flag = 0;
// // // // // // // // // // // // // // // // // // // // // // //     // for (int j=0; j<a.length-1-i; j++){
// // // // // // // // // // // // // // // // // // // // // // //     // if (a[j].compareTo(a[j+1])>0){
// // // // // // // // // // // // // // // // // // // // // // //     // temp = a[j];
// // // // // // // // // // // // // // // // // // // // // // //     // a[j] = a[j+1];
// // // // // // // // // // // // // // // // // // // // // // //     // a[j+1] = temp;
// // // // // // // // // // // // // // // // // // // // // // //     // flag = 1;
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // if(flag == 0){
// // // // // // // // // // // // // // // // // // // // // // //     // break;
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i<a.length; i++){
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(a[i]+ "");

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // selection sort

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a = {10,50,30,6,4};
// // // // // // // // // // // // // // // // // // // // // // //     // int min; int temp = 0;

// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i<a.length; i++){

// // // // // // // // // // // // // // // // // // // // // // //     // min = i;
// // // // // // // // // // // // // // // // // // // // // // //     // for (int j = i+1; j<a.length; j++){

// // // // // // // // // // // // // // // // // // // // // // //     // if (a[j]<a[min]){
// // // // // // // // // // // // // // // // // // // // // // //     // min = j;
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // temp = a[i];
// // // // // // // // // // // // // // // // // // // // // // //     // a[i] = a[min];
// // // // // // // // // // // // // // // // // // // // // // //     // a[min] = temp;
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i<a.length; i++){
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(a[i]);
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // String[] a = {"bhat", "rag", "hraj", "akash"};
// // // // // // // // // // // // // // // // // // // // // // //     // int min;
// // // // // // // // // // // // // // // // // // // // // // //     // String temp = "";

// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i<a.length; i++){

// // // // // // // // // // // // // // // // // // // // // // //     // min = i;
// // // // // // // // // // // // // // // // // // // // // // //     // for (int j = i+1; j<a.length; j++){

// // // // // // // // // // // // // // // // // // // // // // //     // if (a[j].compareTo(a[min])<0){
// // // // // // // // // // // // // // // // // // // // // // //     // min = j;
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // temp = a[i];
// // // // // // // // // // // // // // // // // // // // // // //     // a[i] = a[min];
// // // // // // // // // // // // // // // // // // // // // // //     // a[min] = temp;
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i<a.length; i++){
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(a[i]);
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // insertion sort

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a = { 5, 1, 6, 2, 4, 3 };
// // // // // // // // // // // // // // // // // // // // // // //     // int temp;
// // // // // // // // // // // // // // // // // // // // // // //     // int j;
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 1; i < a.length; i++) {
// // // // // // // // // // // // // // // // // // // // // // //     // temp = a[i];
// // // // // // // // // // // // // // // // // // // // // // //     // j = i;

// // // // // // // // // // // // // // // // // // // // // // //     // while (j > 0 && a[j - 1] > temp) {
// // // // // // // // // // // // // // // // // // // // // // //     // a[j] = a[j - 1];
// // // // // // // // // // // // // // // // // // // // // // //     // j = j - 1;

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // a[j] = temp;

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < a.length; i++) {
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(a[i] + "");
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // linear searching program

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a = { 5, 1, 6, 2, 4, 3 };
// // // // // // // // // // // // // // // // // // // // // // //     // int num = 60;
// // // // // // // // // // // // // // // // // // // // // // //     // int temp = 0;
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i<a.length; i++){
// // // // // // // // // // // // // // // // // // // // // // //     // if (a[i]==num){
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println("this num is present in the given array"+ i);
// // // // // // // // // // // // // // // // // // // // // // //     // temp = temp +1;
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // if (temp == 0){
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println("sorry this num is not present in the array" + num);
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // binray search

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a = { 5, 1, 6, 2, 4, 3, 8, 6, 4, 2, 4 };

// // // // // // // // // // // // // // // // // // // // // // //     // int num = 4;
// // // // // // // // // // // // // // // // // // // // // // //     // int li = 0;
// // // // // // // // // // // // // // // // // // // // // // //     // int hi = a.length - 1;
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(hi);
// // // // // // // // // // // // // // // // // // // // // // //     // int mi = (li + hi) / 2;
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(mi);

// // // // // // // // // // // // // // // // // // // // // // //     // while (li <= hi) {

// // // // // // // // // // // // // // // // // // // // // // //     // if (a[mi] == num) {
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println("num is present at " + mi);
// // // // // // // // // // // // // // // // // // // // // // //     // break;

// // // // // // // // // // // // // // // // // // // // // // //     // } else if (a[mi] < num) {
// // // // // // // // // // // // // // // // // // // // // // //     // li = mi + 1;

// // // // // // // // // // // // // // // // // // // // // // //     // } else {
// // // // // // // // // // // // // // // // // // // // // // //     // hi = mi - 1;
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // mi = (li + hi) / 2;

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // if (li > hi) {
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println("num not found");
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(hi);

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a = { 5488, 4, 5, 3, 4, 8, 7, 548 };
// // // // // // // // // // // // // // // // // // // // // // //     // int max = a[0];
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < a.length; i++) {
// // // // // // // // // // // // // // // // // // // // // // //     // if (a[i] > max) {
// // // // // // // // // // // // // // // // // // // // // // //     // max = a[i];
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(max);

// // // // // // // // // // // // // // // // // // // // // // //     // int[] akash = { 5488, 4, 5, 3, 4, 8, 7, 548 };
// // // // // // // // // // // // // // // // // // // // // // //     // int temp;
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < akash.length; i++) {

// // // // // // // // // // // // // // // // // // // // // // //     // for (int j = i + 1; j < akash.length; j++) {

// // // // // // // // // // // // // // // // // // // // // // //     // if (akash[i] > akash[j]) {
// // // // // // // // // // // // // // // // // // // // // // //     // temp = akash[i];
// // // // // // // // // // // // // // // // // // // // // // //     // akash[i] = akash[j];
// // // // // // // // // // // // // // // // // // // // // // //     // akash[j] = temp;

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // // System.out.print(akash[i]);
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < akash.length; i++) {
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.print(akash[i] + " ");
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println("this is the secod largest number in a array " +
// // // // // // // // // // // // // // // // // // // // // // //     // akash[akash.length-2]);

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a = { 5, 8, 12, 7, 6, 2, 4 };
// // // // // // // // // // // // // // // // // // // // // // //     // int k = 4;

// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < a.length; i++) {
// // // // // // // // // // // // // // // // // // // // // // //     // for (int j = i + 1; j < a.length; j++) {

// // // // // // // // // // // // // // // // // // // // // // //     // if (a[i] > a[j]) {
// // // // // // // // // // // // // // // // // // // // // // //     // int temp = a[i];
// // // // // // // // // // // // // // // // // // // // // // //     // a[i] = a[j];
// // // // // // // // // // // // // // // // // // // // // // //     // a[j] = temp;

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // if (i == k - 1) {
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(a[i]);
// // // // // // // // // // // // // // // // // // // // // // //     // break;
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.print("ssssssssssssssssssssssss");
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < a.length; i++) {

// // // // // // // // // // // // // // // // // // // // // // //     // System.out.print(a[i] + " ");
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // dublicate element find method 1 (brute force method)

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a = {3,5,4,6,4,2, 8};

// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < a.length-1; i++) {

// // // // // // // // // // // // // // // // // // // // // // //     // for (int j = i+1; j < a.length; j++) {

// // // // // // // // // // // // // // // // // // // // // // //     // if (a[i]==a[j] && i != j) {

// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(a[i]);
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // set interface for finding 1st duplicates method 1

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a = {1,2,5,546,62,2,5,5};
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < a.length-1; i++) {

// // // // // // // // // // // // // // // // // // // // // // //     // int counter = 0;
// // // // // // // // // // // // // // // // // // // // // // //     // for (int j = i+1; j < a.length; j++) {

// // // // // // // // // // // // // // // // // // // // // // //     // if(a[i]==a[j]){
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(a[i]);
// // // // // // // // // // // // // // // // // // // // // // //     // counter += 1;
// // // // // // // // // // // // // // // // // // // // // // //     // break;
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // if (counter>0) {
// // // // // // // // // // // // // // // // // // // // // // //     // break;

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // finding 1st duplicate method2

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a={6,8,3,2,1,2,4};

// // // // // // // // // // // // // // // // // // // // // // //     // int temp = -1;
// // // // // // // // // // // // // // // // // // // // // // //     // HashSet<Integer> hs = new HashSet<>();

// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < a.length; i++) {

// // // // // // // // // // // // // // // // // // // // // // //     // if (hs.contains(a[i])) {

// // // // // // // // // // // // // // // // // // // // // // //     // temp = i;

// // // // // // // // // // // // // // // // // // // // // // //     // }else{
// // // // // // // // // // // // // // // // // // // // // // //     // hs.add(a[i]);
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // if (temp != 1) {

// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(a[temp]);
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // else{
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println("sorry this element not found!");
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // find element that appers only one time

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a = {5,8,7,5,4,7,4};

// // // // // // // // // // // // // // // // // // // // // // //     // int res = a[0];
// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 1; i < a.length; i++) {

// // // // // // // // // // // // // // // // // // // // // // //     // res = res ^ a[i];

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println("this is the one time appers element " + res);

// // // // // // // // // // // // // // // // // // // // // // //     // fimd even n odd number

// // // // // // // // // // // // // // // // // // // // // // //     // int[] a = { 5, 8, 7, 5, 4, 7, 4 };

// // // // // // // // // // // // // // // // // // // // // // //     // ArrayList<Integer> a1 = new ArrayList<>();
// // // // // // // // // // // // // // // // // // // // // // //     // ArrayList<Integer> a2 = new ArrayList<>();

// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < a.length; i++) {

// // // // // // // // // // // // // // // // // // // // // // //     // if (a[i] % 2 == 0) {

// // // // // // // // // // // // // // // // // // // // // // //     // a1.add(a[i]);
// // // // // // // // // // // // // // // // // // // // // // //     // } else {

// // // // // // // // // // // // // // // // // // // // // // //     // a2.add(a[i]);

// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // int sum =0;
// // // // // // // // // // // // // // // // // // // // // // //     // for (int iterable_element : a1) {

// // // // // // // // // // // // // // // // // // // // // // //     // sum =sum + iterable_element;
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(sum + " ");

// // // // // // // // // // // // // // // // // // // // // // //     // int sum2 = 0;

// // // // // // // // // // // // // // // // // // // // // // //     // for (int iterable_element : a2) {
// // // // // // // // // // // // // // // // // // // // // // //     // sum2 = sum2+ iterable_element;
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(iterable_element + " ");
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(sum2);

// // // // // // // // // // // // // // // // // // // // // // //     // Scanner sc =new Scanner(System.in);
// // // // // // // // // // // // // // // // // // // // // // //     // int[] n = sc.
// // // // // // // // // // // // // // // // // // // // // // //     // // int[] h = new int[n];
// // // // // // // // // // // // // // // // // // // // // // //     // // int[] n = {3, 4, 3, 2, 4};
// // // // // // // // // // // // // // // // // // // // // // //     // int[] n = { 4, 4, 3, 5, 6 };
// // // // // // // // // // // // // // // // // // // // // // //     // int gt = n[0];
// // // // // // // // // // // // // // // // // // // // // // //     // int nt = 0;

// // // // // // // // // // // // // // // // // // // // // // //     // for (int i = 0; i < n.length - 1; i++) {

// // // // // // // // // // // // // // // // // // // // // // //     // if (gt < n[i]) {
// // // // // // // // // // // // // // // // // // // // // // //     // nt = gt - (n[i] - gt);
// // // // // // // // // // // // // // // // // // // // // // //     // nt = nt - (n[i] - nt);
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // if (gt >= n[i]) {
// // // // // // // // // // // // // // // // // // // // // // //     // nt = gt + (gt - n[i]);
// // // // // // // // // // // // // // // // // // // // // // //     // System.out.println(nt);
// // // // // // // // // // // // // // // // // // // // // // //     // nt = nt + (nt - n[i]);
// // // // // // // // // // // // // // // // // // // // // // //     // }
// // // // // // // // // // // // // // // // // // // // // // //     // }

// // // // // // // // // // // // // // // // // // // // // // //     // System.out.print(nt);

// // // // // // // // // // // // // // // // // // // // // // //     // check if an array is sorted and roted

// // // // // // // // // // // // // // // // // // // // // // //     int arr[] = { 3, 4, 5, 1, 2 };

// // // // // // // // // // // // // // // // // // // // // // //     int n = arr.length;

// // // // // // // // // // // // // // // // // // // // // // //     // Function Call
// // // // // // // // // // // // // // // // // // // // // // //     checkIfSortRotated(arr, n);

// // // // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // class App{

// // // // // // // // // // // // // // // // // // // // // //     // import java.io.*;

// // // // // // // // // // // // // // // // // // // // // // 	// Function to check if an array is
// // // // // // // // // // // // // // // // // // // // // // 	// Sorted and rotated clockwise
// // // // // // // // // // // // // // // // // // // // // // 	static boolean checkIfSortRotated(int arr[], int n)
// // // // // // // // // // // // // // // // // // // // // // 	{
// // // // // // // // // // // // // // // // // // // // // // 		// Initializing two variables x,y as zero.
// // // // // // // // // // // // // // // // // // // // // // 		int x = 0, y = 0;

// // // // // // // // // // // // // // // // // // // // // // 		// Traversing array 0 to last element.
// // // // // // // // // // // // // // // // // // // // // // 		// n-1 is taken as we used i+1.
// // // // // // // // // // // // // // // // // // // // // // 		for (int i = 0; i < n - 1; i++) {
// // // // // // // // // // // // // // // // // // // // // // 			if (arr[i] < arr[i + 1])
// // // // // // // // // // // // // // // // // // // // // // 				x++;
// // // // // // // // // // // // // // // // // // // // // // 			else
// // // // // // // // // // // // // // // // // // // // // // 				y++;
// // // // // // // // // // // // // // // // // // // // // // 		}

// // // // // // // // // // // // // // // // // // // // // // 		// If till now both x,y are greater
// // // // // // // // // // // // // // // // // // // // // // 		// then 1 means array is not sorted.
// // // // // // // // // // // // // // // // // // // // // // 		// If both any of x,y is zero means
// // // // // // // // // // // // // // // // // // // // // // 		// array is not rotated.
// // // // // // // // // // // // // // // // // // // // // // 		if (x == 1 || y == 1) {
// // // // // // // // // // // // // // // // // // // // // // 			// Checking for last element with first.
// // // // // // // // // // // // // // // // // // // // // // 			if (arr[n - 1] < arr[0])
// // // // // // // // // // // // // // // // // // // // // // 				x++;
// // // // // // // // // // // // // // // // // // // // // // 			else
// // // // // // // // // // // // // // // // // // // // // // 				y++;

// // // // // // // // // // // // // // // // // // // // // // 			// Checking for final result.
// // // // // // // // // // // // // // // // // // // // // // 			if (x == 1 || y == 1)
// // // // // // // // // // // // // // // // // // // // // // 				return true;
// // // // // // // // // // // // // // // // // // // // // // 		}
// // // // // // // // // // // // // // // // // // // // // // 		// If still not true then definitely false.
// // // // // // // // // // // // // // // // // // // // // // 		return false;
// // // // // // // // // // // // // // // // // // // // // // 	}

// // // // // // // // // // // // // // // // // // // // // // 	// Driver code
// // // // // // // // // // // // // // // // // // // // // // 	public static void main(String[] args)

// // // // // // // // // // // // // // // // // // // // // // 	{

// // // // // // // // // // // // // // // // // // // // // // 		// Scanner s = new Scanner(System.in);
// // // // // // // // // // // // // // // // // // // // // //         // int T = s.nextInt();
// // // // // // // // // // // // // // // // // // // // // //         // int n = s.nextInt();
// // // // // // // // // // // // // // // // // // // // // //         // int arr[] = new int[n];

// // // // // // // // // // // // // // // // // // // // // //         // for (int i = 0; i < n; i++) {
// // // // // // // // // // // // // // // // // // // // // //         //     arr[i] = s.nextInt();

// // // // // // // // // // // // // // // // // // // // // //         // }
// // // // // // // // // // // // // // // // // // // // // //         // for (int i = 0; i < T; i++) {

// // // // // // // // // // // // // // // // // // // // // //         //     boolean x = checkIfSortRotated(arr, n);
// // // // // // // // // // // // // // // // // // // // // //         //     if (x == true){
// // // // // // // // // // // // // // // // // // // // // // 		// 	    System.out.println("YES");
// // // // // // // // // // // // // // // // // // // // // //         //     }
// // // // // // // // // // // // // // // // // // // // // // 		//     else{
// // // // // // // // // // // // // // // // // // // // // // 		// 	    System.out.println("NO");
// // // // // // // // // // // // // // // // // // // // // //         //     }

// // // // // // // // // // // // // // // // // // // // // //         // }

// // // // // // // // // // // // // // // // // // // // // // 		// // Function Call

// // // // // // // // // // // // // // // // // // // // // // 	}

// // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // // class App {

// // // // // // // // // // // // // // // // // // // // // //     public static double find(int[] a1, int[] a2) {
// // // // // // // // // // // // // // // // // // // // // //         int len = a1.length + a2.length;
// // // // // // // // // // // // // // // // // // // // // //         int[] mergerd = new int[len];

// // // // // // // // // // // // // // // // // // // // // //         int i = 0;
// // // // // // // // // // // // // // // // // // // // // //         int j = 0;
// // // // // // // // // // // // // // // // // // // // // //         int k = 0;

// // // // // // // // // // // // // // // // // // // // // //         while (i < a1.length && j < a2.length) {

// // // // // // // // // // // // // // // // // // // // // //             if (a1[i] < a2[i]) {

// // // // // // // // // // // // // // // // // // // // // //                 mergerd[k] = a1[i];
// // // // // // // // // // // // // // // // // // // // // //                 i++;
// // // // // // // // // // // // // // // // // // // // // //                 k++;

// // // // // // // // // // // // // // // // // // // // // //             } else {

// // // // // // // // // // // // // // // // // // // // // //                 mergerd[k] = a2[i];
// // // // // // // // // // // // // // // // // // // // // //                 j++;
// // // // // // // // // // // // // // // // // // // // // //                 k++;

// // // // // // // // // // // // // // // // // // // // // //             }

// // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // //         while (i < a1.length) {
// // // // // // // // // // // // // // // // // // // // // //             mergerd[k] = a1[i];
// // // // // // // // // // // // // // // // // // // // // //             i++;
// // // // // // // // // // // // // // // // // // // // // //             k++;

// // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // //         double median = 0.0;
// // // // // // // // // // // // // // // // // // // // // //         int mid = mergerd.length / 2;
// // // // // // // // // // // // // // // // // // // // // //         if (mergerd.length % 2 == 1) {

// // // // // // // // // // // // // // // // // // // // // //             median = mergerd[mid];

// // // // // // // // // // // // // // // // // // // // // //         } else {

// // // // // // // // // // // // // // // // // // // // // //             median = (mergerd[mid] + mergerd[mid - 1]) / 2.0;

// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         return median;

// // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // //     public static void main(String[] args) {

// // // // // // // // // // // // // // // // // // // // // //         Scanner s = new Scanner(System.in);

// // // // // // // // // // // // // // // // // // // // // //         String n1 = s.nextLine();
// // // // // // // // // // // // // // // // // // // // // //         String[] str = n1.split(" ");
// // // // // // // // // // // // // // // // // // // // // //         int var1 = Integer.parseInt(str[0]);

// // // // // // // // // // // // // // // // // // // // // //         int[] a = new int[var1];
// // // // // // // // // // // // // // // // // // // // // //         for (int i = 0; i < var1; i++) {
// // // // // // // // // // // // // // // // // // // // // //             a[i] = s.nextInt();

// // // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // // //         int var2 = Integer.parseInt(str[1]);
// // // // // // // // // // // // // // // // // // // // // //         int[] b = new int[var2];

// // // // // // // // // // // // // // // // // // // // // //         for (int i = 0; i < var2; i++) {

// // // // // // // // // // // // // // // // // // // // // //             b[i] = s.nextInt();
// // // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // // //         double median = find(a, b);
// // // // // // // // // // // // // // // // // // // // // //         System.out.println(median);

// // // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // class Main {
// // // // // // // // // // // // // // // // // // // // //     public static void main(String[] args) {
// // // // // // // // // // // // // // // // // // // // //         // Your code here
// // // // // // // // // // // // // // // // // // // // //         Scanner s = new Scanner(System.in);
// // // // // // // // // // // // // // // // // // // // //         System.out.println("enter");
// // // // // // // // // // // // // // // // // // // // //         int K = s.nextInt();
// // // // // // // // // // // // // // // // // // // // //         int anss = 0;
// // // // // // // // // // // // // // // // // // // // //         int ans = -1;
// // // // // // // // // // // // // // // // // // // // //         int i = 1;
// // // // // // // // // // // // // // // // // // // // //         while (i != 0) {
// // // // // // // // // // // // // // // // // // // // //             anss = (int) Math.pow(i, 2) + (3 * i);

// // // // // // // // // // // // // // // // // // // // //             if (K == anss) {
// // // // // // // // // // // // // // // // // // // // //                 i += 1;

// // // // // // // // // // // // // // // // // // // // //             }

// // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // //         if (i > 1) {
// // // // // // // // // // // // // // // // // // // // //             System.out.print(i);
// // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // // public boolean check(int[] nums){
// // // // // // // // // // // // // // // // // // // // //     int count = 0;
// // // // // // // // // // // // // // // // // // // // //     for (int i = 0; i < nums.length; i++) {

// // // // // // // // // // // // // // // // // // // // //         if (nums[i]> nums[(i+1)% nums.length]) {

// // // // // // // // // // // // // // // // // // // // //             count ++;

// // // // // // // // // // // // // // // // // // // // //         }
// // // // // // // // // // // // // // // // // // // // //         if (count>1) {

// // // // // // // // // // // // // // // // // // // // //             return false;

// // // // // // // // // // // // // // // // // // // // //         }

// // // // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // // //     return true;
// // // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // // /**
// // // // // // // // // // // // // // // // // // // //  * App
// // // // // // // // // // // // // // // // // // // //  */
// // // // // // // // // // // // // // // // // // // // public class App {

// // // // // // // // // // // // // // // // // // // // public static void main(String[] args) {
// // // // // // // // // // // // // // // // // // // //     Scanner sc = new Scanner(System.in);
// // // // // // // // // // // // // // // // // // // //     int n = sc.nextInt();
// // // // // // // // // // // // // // // // // // // //     int[] arr = new int[n];  
// // // // // // // // // // // // // // // // // // // //     for(int i=0; i<arr.length; i++){
// // // // // // // // // // // // // // // // // // // //         arr[i] = sc.nextInt();
// // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // //     System.out.println(arr.length);
// // // // // // // // // // // // // // // // // // // //     // int[] arr = {10,30,40,55,5,5,6,2,1,45,42,5,4,6,5,6,2,3,1,66,5,6,6,5,2,2,5,5,4,55};
// // // // // // // // // // // // // // // // // // // //     long productof = 1;

// // // // // // // // // // // // // // // // // // // //     for (int j = 0; j < arr.length; j++) {
// // // // // // // // // // // // // // // // // // // //     productof *= arr[j];
// // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // //     long sumof = 0;
// // // // // // // // // // // // // // // // // // // //     for (int i = 0; i < arr.length; i++) {
// // // // // // // // // // // // // // // // // // // //         sumof += arr[i];

// // // // // // // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // // // // // // //     System.out.println(productof/sumof);
// // // // // // // // // // // // // // // // // // // // }   
// // // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // public static int[] implementMergeSort(int arr[], int start, int end)
// // // // // // // // // // // // // // // // // // //     {

// // // // // // // // // // // // // // // // // // //               if(start >= end) {

// // // // // // // // // // // // // // // // // // //               return;

// // // // // // // // // // // // // // // // // // //               }

// // // // // // // // // // // // // // // // // // //               int mid = start + (end-start)/2;
// // // // // // // // // // // // // // // // // // //               divide (arr, start, mid);
// // // // // // // // // // // // // // // // // // //               divide (arr, mid+1, end);
// // // // // // // // // // // // // // // // // // //               conquer (arr, start, mid, end);

// // // // // // // // // // // // // // // // // // //               I

// // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // /**
// // // // // // // // // // // // // // // // // // //  * App
// // // // // // // // // // // // // // // // // // //  */
// // // // // // // // // // // // // // // // // // // public class App {

// // // // // // // // // // // // // // // // // // //     public static void main(String[] args) {
// // // // // // // // // // // // // // // // // // //         int arr[] = {5, 46, 7, 465};
// // // // // // // // // // // // // // // // // // //         int start = arr[0];
// // // // // // // // // // // // // // // // // // //         int end = arr[arr.length];

// // // // // // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // // // // // // public static int[] implementMergeSort(int arr[], int start, int end)
// // // // // // // // // // // // // // // // // // // {

// // // // // // // // // // // // // // // // // // //           if(start >= end) {

// // // // // // // // // // // // // // // // // // //           return;

// // // // // // // // // // // // // // // // // // //           }

// // // // // // // // // // // // // // // // // // //           int mid = start + (end-start)/2;
// // // // // // // // // // // // // // // // // // //           divide (arr, start, mid);
// // // // // // // // // // // // // // // // // // //           divide (arr, mid+1, end);
// // // // // // // // // // // // // // // // // // //           conquer (arr, start, mid, end);

// // // // // // // // // // // // // // // // // // //           I

// // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // public static void conquer(int arr[], int start, int mid, int end)
// // // // // // // // // // // // // // // // // // // {
// // // // // // // // // // // // // // // // // // //           int merged [] = new int [end-start+1];

// // // // // // // // // // // // // // // // // // //           int idx1= start;

// // // // // // // // // // // // // // // // // // //           int idx2= mid+1;

// // // // // // // // // // // // // // // // // // //           int x = 0;

// // // // // // // // // // // // // // // // // // //           while(idx1 <= mid && idx2 <= end) {
// // // // // // // // // // // // // // // // // // //              if(arr[idx1] <<= arr[idx2]) {
// // // // // // // // // // // // // // // // // // //                 merged [x++] = arr[idx1++];
// // // // // // // // // // // // // // // // // // //                  } else {

// // // // // // // // // // // // // // // // // // //                   merged [x++] = arr[idx2++];

// // // // // // // // // // // // // // // // // // //                 }

// // // // // // // // // // // // // // // // // // //           }

// // // // // // // // // // // // // // // // // // //           while(idx1 <= mid) {
// // // // // // // // // // // // // // // // // // //              merged [x++] = arr[idx1++];
// // // // // // // // // // // // // // // // // // //           }

// // // // // // // // // // // // // // // // // // //           while(idx2 << end) {
// // // // // // // // // // // // // // // // // // //              merged [x++] = arr[idx2++];

// // // // // // // // // // // // // // // // // // //           }

// // // // // // // // // // // // // // // // // // //           for(int i=0, j = 1-start; i<merged.length; i++, j++) {
// // // // // // // // // // // // // // // // // // //              arr[j] = merged [1];

// // // // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // // // //       System.out.print(arr);

// // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // // /**
// // // // // // // // // // // // // // // // // //  * App
// // // // // // // // // // // // // // // // // //  */
// // // // // // // // // // // // // // // // // // public class App {

// // // // // // // // // // // // // // // // // //    public static void main(String[] args) {
// // // // // // // // // // // // // // // // // //       try (Scanner scanner = new Scanner(System.in)) {
// // // // // // // // // // // // // // // // // //          int n = scanner.nextInt();
// // // // // // // // // // // // // // // // // //          int m = scanner.nextInt();
// // // // // // // // // // // // // // // // // //          int[][] arr = new int[n][m];
// // // // // // // // // // // // // // // // // //          for (int i = 0; i < arr.length; i++) {

// // // // // // // // // // // // // // // // // //             for (int j = 0; j < arr.length; j++) {

// // // // // // // // // // // // // // // // // //                arr[i][j] = scanner.nextInt();
// // // // // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // // // // //          }

// // // // // // // // // // // // // // // // // //          for (int i = 0; i < arr.length; i++) {
// // // // // // // // // // // // // // // // // //             for (int j = 0; j < arr.length; j++) {
// // // // // // // // // // // // // // // // // //                System.out.println(arr[i][j]);
// // // // // // // // // // // // // // // // // //             }

// // // // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // // //       System.out.println();
// // // // // // // // // // // // // // // // // //    }

// // // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // // /**
// // // // // // // // // // // // // // // // //  * App
// // // // // // // // // // // // // // // // //  */
// // // // // // // // // // // // // // // // // public class App {

// // // // // // // // // // // // // // // // //    public static void main(String[] args) {

// // // // // // // // // // // // // // // // //       try (Scanner sc = new Scanner(System.in)) {
// // // // // // // // // // // // // // // // //          String samplesString = sc.nextLine();
// // // // // // // // // // // // // // // // //          String[] stringArray = samplesString.split("\\s+");
// // // // // // // // // // // // // // // // //          int[] intArray = new int[stringArray.length];
// // // // // // // // // // // // // // // // //          int i;
// // // // // // // // // // // // // // // // //          for (int j =i=0; j < intArray.length; j++, i++) {
// // // // // // // // // // // // // // // // //             String numbeString = stringArray[j];
// // // // // // // // // // // // // // // // //             intArray[i] = Integer.parseInt(numbeString);
// // // // // // // // // // // // // // // // //             System.out.println(intArray);
// // // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // // //       } catch (NumberFormatException e) {
// // // // // // // // // // // // // // // // //        
// // // // // // // // // // // // // // // // //          e.printStackTrace();
// // // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // // //    }
// // // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // // /**
// // // // // // // // // // // // // // // //  * App
// // // // // // // // // // // // // // // //  */
// // // // // // // // // // // // // // // // public class App {

// // // // // // // // // // // // // // // //    public static void main(String[] args) {

// // // // // // // // // // // // // // // //       int n = 5;
// // // // // // // // // // // // // // // //       // for (int i = n; i>1;i--) {

// // // // // // // // // // // // // // // //       //    for (int j = 1; j <=2*i-1; j++) {

// // // // // // // // // // // // // // // //       //       System.out.print(j);

// // // // // // // // // // // // // // // //       //    }

// // // // // // // // // // // // // // // //       //    // for (int k = 1; k > 0; k--) {

// // // // // // // // // // // // // // // //       //    //    System.out.print("*");

// // // // // // // // // // // // // // // //       //    // }
// // // // // // // // // // // // // // // //       //    System.out.println();
// // // // // // // // // // // // // // // //       // }

// // // // // // // // // // // // // // // //       // for (int i = 1; i <= n; i++) {

// // // // // // // // // // // // // // // //       //    for (int j = 1; j <= i; j++) {

// // // // // // // // // // // // // // // //       //       System.out.print((char)(96+j));
// // // // // // // // // // // // // // // //       //    } 
// // // // // // // // // // // // // // // //       //    System.out.println();
// // // // // // // // // // // // // // // //       // }

// // // // // // // // // // // // // // // //       //   for (int i = 1; i <=n; i++) {
// // // // // // // // // // // // // // // //       //    for (int j = 1; j <= n-i; j++) {
// // // // // // // // // // // // // // // //       //       System.out.print(" ");

// // // // // // // // // // // // // // // //       //    }
// // // // // // // // // // // // // // // //       //    for(int k=1; k<=i; k++){
// // // // // // // // // // // // // // // //       //        System.out.print(" *");

// // // // // // // // // // // // // // // //       //    }
// // // // // // // // // // // // // // // //       //    System.out.println();
// // // // // // // // // // // // // // // //       // }

// // // // // // // // // // // // // // // //       for (int i = n; i >=1; i--) {
// // // // // // // // // // // // // // // //          for (int j = 1; j <= n-i; j++) {
// // // // // // // // // // // // // // // //             System.out.print(" ");
// // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // //          for (int k = 1; k <=i; k++) {
// // // // // // // // // // // // // // // //             System.out.print("*"+" ");
// // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // //          System.out.println();
// // // // // // // // // // // // // // // //       }

// // // // // // // // // // // // // // // //       for (int i = 0; i < n; i++) {

// // // // // // // // // // // // // // // //          for (int j = 0; j < n-i; j++) {
// // // // // // // // // // // // // // // //             System.out.print(" ");
// // // // // // // // // // // // // // // //          }

// // // // // // // // // // // // // // // //          for (int j = 0; j < 2*i-1; j++) {
// // // // // // // // // // // // // // // //             System.out.print(i +" ");
// // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // //          System.out.println();

// // // // // // // // // // // // // // // //       }

// // // // // // // // // // // // // // // //       for (int i = n; i >0; i--) {
// // // // // // // // // // // // // // // //          for (int j = 0; j < n-i; j++) {
// // // // // // // // // // // // // // // //             System.out.print(" ");
// // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // //          for (int j = 0; j < 2*i-1; j++) {
// // // // // // // // // // // // // // // //             System.out.print(j+" ");
// // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // //          System.out.println();
// // // // // // // // // // // // // // // //       }

// // // // // // // // // // // // // // // //       for (int i = n; i >0 ; i--) {
// // // // // // // // // // // // // // // //          for (int d = 0; d < i; d++) {
// // // // // // // // // // // // // // // //             System.out.print(" ");
// // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // //          for (int j = 1; j <= n-i; j++) {
// // // // // // // // // // // // // // // //             System.out.print(j);
// // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // //          for (int k = 1; k <n-i; k++) {
// // // // // // // // // // // // // // // //             System.out.print(k);
// // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // //          System.out.println();
// // // // // // // // // // // // // // // //       }

// // // // // // // // // // // // // // // //       for (int i = 1; i <= n; i++) {
// // // // // // // // // // // // // // // //          for (int j = 1; j <= n-i; j++) {
// // // // // // // // // // // // // // // //             System.out.print(" ");
// // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // //          for (int k = i; k >= 1 ; k--) {
// // // // // // // // // // // // // // // //             System.out.print(k);
// // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // //          if (i==2) {
// // // // // // // // // // // // // // // //             for (int d = 2; d <= i; d++) {
// // // // // // // // // // // // // // // //                System.out.print(d);
// // // // // // // // // // // // // // // //             }

// // // // // // // // // // // // // // // //             System.out.println();

// // // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // // //          System.out.println();
// // // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // // //    }
// // // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // // import java.util.Scanner;

// // // // // // // // // // // // // // // class Main {
// // // // // // // // // // // // // // // // 
// // // // // // // // // // // // // // //    int[] tmparr;
// // // // // // // // // // // // // // //    public static int[] implementMergeSort(int arr[], int start, int end)
// // // // // // // // // // // // // // //     {
// // // // // // // // // // // // // // //         // Your code here
// // // // // // // // // // // // // // //        // You can have your own function where you will use 
// // // // // // // // // // // // // // //       // start and end position for divide purpose  
// // // // // // // // // // // // // // //       int len = arr.length;
// // // // // // // // // // // // // // //       this.tmparr = new int[len];
// // // // // // // // // // // // // // //       divide(0, len-1);

// // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // //     static void divide(int start, int end ){
// // // // // // // // // // // // // // //        if(start<end){
// // // // // // // // // // // // // // //           int middle = start + (end - start)/2;
// // // // // // // // // // // // // // //          divide(start, middle);

// // // // // // // // // // // // // // //          divide(middle+1, end);
// // // // // // // // // // // // // // //          merge(start, middle, end);
// // // // // // // // // // // // // // //        }

// // // // // // // // // // // // // // //     }

// // // // // // // // // // // // // // //     static void merge(int start, int middle, int end){
// // // // // // // // // // // // // // //        for (int i = start; i <= end; i++) {

// // // // // // // // // // // // // // //          tmparr[i] = arr[i];
// // // // // // // // // // // // // // //        }
// // // // // // // // // // // // // // //        int i = start;
// // // // // // // // // // // // // // //        int j = middle + 1;
// // // // // // // // // // // // // // //        int k = end;

// // // // // // // // // // // // // // //        while(i<= middle && i<= end){
// // // // // // // // // // // // // // //           if(tmparr[i] <= tmparr[j]){
// // // // // // // // // // // // // // //              arr[k] = tmparr[i];
// // // // // // // // // // // // // // //              i++;
// // // // // // // // // // // // // // //           }
// // // // // // // // // // // // // // //           else{
// // // // // // // // // // // // // // //              arr[k] = tmparr[j];
// // // // // // // // // // // // // // //              j++;
// // // // // // // // // // // // // // //           }
// // // // // // // // // // // // // // //           k++;

// // // // // // // // // // // // // // //        }
// // // // // // // // // // // // // // //        while (i<= middle) {
// // // // // // // // // // // // // // //           arr[k] = tmparr[i];
// // // // // // // // // // // // // // //           k++;
// // // // // // // // // // // // // // //           i++;

// // // // // // // // // // // // // // //        }
// // // // // // // // // // // // // // //     }
// // // // // // // // // // // // // // //    public static void main(String[] args){

// // // // // // // // // // // // // // //       Scanner sc = new Scanner(System.in);
// // // // // // // // // // // // // // //          // Declaring and initializing an array of size 10
// // // // // // // // // // // // // // //            int  n = sc.nextInt();
// // // // // // // // // // // // // // //            int[] a = new int[n];
// // // // // // // // // // // // // // //            for (int i = 0; i < a.length; i++) {
// // // // // // // // // // // // // // //               a[i] = sc.nextInt();
// // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // //             while (n!=0) {
// // // // // // // // // // // // // // //                for (int i = 0; i < a.length-1; i++) {
// // // // // // // // // // // // // // //                   if (a[i]<a[i+1]) {
// // // // // // // // // // // // // // //                      int temp = a[i];
// // // // // // // // // // // // // // //                      a[i] = a[i+1];
// // // // // // // // // // // // // // //                      a[i+1] = temp;
// // // // // // // // // // // // // // //                   }
// // // // // // // // // // // // // // //                }
// // // // // // // // // // // // // // //             n--;

// // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // //             for (int j = 0; j < a.length-1; j++) {
// // // // // // // // // // // // // // //                System.out.print(a[j]);
// // // // // // // // // // // // // // //             }
// // // // // // // // // // // // // // //             System.out.println();

// // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // //   

// // // // // // // // // // // // // // // class Main{
// // // // // // // // // // // // // // //    static int partition(int[] arr, int start, int end){
// // // // // // // // // // // // // // //       int pivot = arr[start];
// // // // // // // // // // // // // // //       while(start <= end){
// // // // // // // // // // // // // // //          while(arr[start] < pivot){
// // // // // // // // // // // // // // //             start ++;
// // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // //          while(arr[end] > pivot){
// // // // // // // // // // // // // // //             end--;
// // // // // // // // // // // // // // //          }
// // // // // // // // // // // // // // //          if(start<= end){
// // // // // // // // // // // // // // //             int temp = arr[start];
// // // // // // // // // // // // // // //                arr[start] = arr[end];
// // // // // // // // // // // // // // //                arr[end] = temp;
// // // // // // // // // // // // // // //                start ++;
// // // // // // // // // // // // // // //                end --;

// // // // // // // // // // // // // // //          }

// // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // //       return start;
// // // // // // // // // // // // // // //    }

// // // // // // // // // // // // // // //    public static int[] quick(int[] arr, int start, int end) {
// // // // // // // // // // // // // // //       int pi = partition(arr, start, end);
// // // // // // // // // // // // // // //       if(start < end-1){
// // // // // // // // // // // // // // //          quick(arr, start, end-1);

// // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // //       if(pi < end){
// // // // // // // // // // // // // // //          quick(arr, pi, end);
// // // // // // // // // // // // // // //       }
// // // // // // // // // // // // // // //       return arr;
// // // // // // // // // // // // // // //    }

// // // // // // // // // // // // // // //    static void swap(int A, int l, int r){
// // // // // // // // // // // // // // //       int temp = A[l];
// // // // // // // // // // // // // // //       a[l] = A[r];
// // // // // // // // // // // // // // //       A[r] = temp;
// // // // // // // // // // // // // // //    }

// // // // // // // // // // // // // // //    public static void main(String[] args) {
// // // // // // // // // // // // // // //       int[] arr = {5,6,8,4,2,5};
// // // // // // // // // // // // // // //       int start = arr[0];
// // // // // // // // // // // // // // //       int end = arr.length-1;
// // // // // // // // // // // // // // //       System.out.println(Main.quick(arr, start, end));

// // // // // // // // // // // // // // //    }
// // // // // // // // // // // // // // // }

// // // // // // // // // // // // // // class Main {
// // // // // // // // // // // // // //    // public void insertion(int[] a){
// // // // // // // // // // // // // //    // int temp, j;
// // // // // // // // // // // // // //    // for(int i=1; i<a.length; i++){

// // // // // // // // // // // // // //    // temp = a[i];
// // // // // // // // // // // // // //    // j = i;
// // // // // // // // // // // // // //    // while(j>0 && a[j-1] > temp){
// // // // // // // // // // // // // //    // a[j] = a[j-1];
// // // // // // // // // // // // // //    // j = j-1;
// // // // // // // // // // // // // //    // }
// // // // // // // // // // // // // //    // a[j] = temp;
// // // // // // // // // // // // // //    // }
// // // // // // // // // // // // // //    // for(int i: a){
// // // // // // // // // // // // // //    // System.out.print(i+" ");

// // // // // // // // // // // // // //    // }
// // // // // // // // // // // // // //    // System.out.println();

// // // // // // // // // // // // // //    // }
// // // // // // // // // // // // // //    public int[] point(int[] arr, int target) {
// // // // // // // // // // // // // //       int pointer1 =0;
// // // // // // // // // // // // // //       int pointer2 = arr.length -1;

// // // // // // // // // // // // // //       while (pointer1 < pointer2) {
// // // // // // // // // // // // // //           while (arr[pointer1]+arr[pointer2] != target) {

// // // // // // // // // // // // // //             if(arr[pointer1]+arr[pointer2] < target){
// // // // // // // // // // // // // //                pointer1++;
// // // // // // // // // // // // // //             }
// // // // // // // // // // // // // //             if(arr[pointer1]+arr[pointer2] > target){
// // // // // // // // // // // // // //                pointer2--;
// // // // // // // // // // // // // //             }
// // // // // // // // // // // // // //           }

// // // // // // // // // // // // // //       }
// // // // // // // // // // // // // //       return new int[] {};
// // // // // // // // // // // // // //    }

// // // // // // // // // // // // // //    public static void main(String[] args) {
// // // // // // // // // // // // // //       try (// Your code here
// // // // // // // // // // // // // //             Scanner sc = new Scanner(System.in)) {
// // // // // // // // // // // // // //          int T = sc.nextInt();
// // // // // // // // // // // // // //          while (T > 0) {
// // // // // // // // // // // // // //             String[] a = sc.nextLine().split(" ");
// // // // // // // // // // // // // //             int n = Integer.parseInt(a[0]);
// // // // // // // // // // // // // //             int target = Integer.parseInt(a[1]);
// // // // // // // // // // // // // //             int[] arr = new int[n];
// // // // // // // // // // // // // //             for (int i = 0; i < n; i++) {
// // // // // // // // // // // // // //                arr[i] = sc.nextInt();
// // // // // // // // // // // // // //             }

// // // // // // // // // // // // // //             Main ovj = new Main();
// // // // // // // // // // // // // //             ovj.point(arr, target);

// // // // // // // // // // // // // //             T--;

// // // // // // // // // // // // // //          }
// // // // // // // // // // // // // //       }

// // // // // // // // // // // // // //    }
// // // // // // // // // // // // // // }

// // // // // // // // // // // // // // class Main {
// // // // // // // // // // // // // //    public static void sort(int[] arr) {
// // // // // // // // // // // // // //        for(int i=0; i< arr.length; i++){
// // // // // // // // // // // // // //            for(int j=0; j<arr.length - i -1; j++){
// // // // // // // // // // // // // //                if(arr[j] > arr[j+1]){
// // // // // // // // // // // // // //                    int temp = arr[j+1];
// // // // // // // // // // // // // //                    arr[j+1] = arr[j];
// // // // // // // // // // // // // //                    arr[j] = temp;
// // // // // // // // // // // // // //                }
// // // // // // // // // // // // // //            }

// // // // // // // // // // // // // //        }
// // // // // // // // // // // // // //        for(int i: arr){
// // // // // // // // // // // // // //          System.out.print(i);
// // // // // // // // // // // // // //      }
// // // // // // // // // // // // // //    }
// // // // // // // // // // // // // //    public static void main(String[] args) {
// // // // // // // // // // // // // //        int[] arr= {0, 2, 1, 2, 0};
// // // // // // // // // // // // // //        sort(arr);

// // // // // // // // // // // // // //    }
// // // // // // // // // // // // // // }

// // // // // // // // // // // // // /**
// // // // // // // // // // // // //  * App
// // // // // // // // // // // // //  */

// // // // // // // // // // // // // import java.util.Arrays;
// // // // // // // // // // // // // public class Main {

// // // // // // // // // // // // //    public static void minimumNum(int[] arr) {

// // // // // // // // // // // // //       for (int i = 0; i < arr.length; i++) {

// // // // // // // // // // // // //          for (int j = 0; j < arr.length - i -1; j++) {
// // // // // // // // // // // // //             if(arr[j] < arr[j+1]){
// // // // // // // // // // // // //                int temp = arr[j+1];
// // // // // // // // // // // // //                arr[j+1] = arr[j];
// // // // // // // // // // // // //                arr[j] = temp;
// // // // // // // // // // // // //             }
// // // // // // // // // // // // //          }
// // // // // // // // // // // // //       }
// // // // // // // // // // // // //       int ans = 1;
// // // // // // // // // // // // //       for (int i = 0; i < arr.length; i++) {
// // // // // // // // // // // // //          if(arr[i] == ans){
// // // // // // // // // // // // //             ans++;

// // // // // // // // // // // // //          }
// // // // // // // // // // // // //       }
// // // // // // // // // // // // //       System.out.println(ans);

// // // // // // // // // // // // //    }

// // // // // // // // // // // // //    public static void main(String[] args){
// // // // // // // // // // // // //       int[] arr =  {2, 3, 7, 6, 8, -1, -10, 15};
// // // // // // // // // // // // //       minimumNum(arr);
// // // // // // // // // // // // //    }

// // // // // // // // // // // // // }

// // // // // // // // // // // // /**
// // // // // // // // // // // //  * Main
// // // // // // // // // // // //  */

// // // // // // // // // // // // // Concatenation of Array
// // // // // // // // // // // // /**
// // // // // // // // // // // //  * Given an integer array nums of length n , you want to create an array ans of
// // // // // // // // // // // //  * length
// // // // // // // // // // // //  * 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n
// // // // // // // // // // // //  * (0-indexed).
// // // // // // // // // // // //  * Specifically, ans is the concatenation of two nums arrays
// // // // // // // // // // // //  */

// // // // // // // // // // // // public class Main {

// // // // // // // // // // // //    public static int[] concatinate(int[] arr, int n) {
// // // // // // // // // // // //       int[] ans = new int[2 * n];
// // // // // // // // // // // //       int index = 0;
// // // // // // // // // // // //       for (int i : arr) {
// // // // // // // // // // // //          ans[index++] = i;
// // // // // // // // // // // //       }
// // // // // // // // // // // //       for (int i : arr) {
// // // // // // // // // // // //          ans[index++] = i;
// // // // // // // // // // // //       }
// // // // // // // // // // // //       return ans;
// // // // // // // // // // // //    }

// // // // // // // // // // // //    /**
// // // // // // // // // // // //     * Longest Mountain in Array
// // // // // // // // // // // //     * Given an array nums with n objects colored red, white, or blue, sort them
// // // // // // // // // // // //     * in-place
// // // // // // // // // // // //     * so that objects of the same color are adjacent, with the colors in the order
// // // // // // // // // // // //     * red, white,
// // // // // // // // // // // //     * and blue.
// // // // // // // // // // // //     * We will use the integers 0 , 1 , and 2 to represent the color red, white, and
// // // // // // // // // // // //     * blue,
// // // // // // // // // // // //     * respectively.
// // // // // // // // // // // //     * You must solve this problem without using the library's sort function.
// // // // // // // // // // // //     */

// // // // // // // // // // // //    public static int[] sort(int[] arr2) {
// // // // // // // // // // // //       for (int i = 0; i < arr2.length; i++) {
// // // // // // // // // // // //          for (int j = 0; j < arr2.length - i - 1; j++) {
// // // // // // // // // // // //             if (arr2[j] > arr2[j + 1]) {
// // // // // // // // // // // //                int temp = arr2[j + 1];
// // // // // // // // // // // //                arr2[j + 1] = arr2[j];
// // // // // // // // // // // //                arr2[j] = temp;
// // // // // // // // // // // //             }
// // // // // // // // // // // //          }
// // // // // // // // // // // //       }
// // // // // // // // // // // //       return arr2;

// // // // // // // // // // // //    }

// // // // // // // // // // // //    /**
// // // // // // // // // // // //     * Remove Boxes
// // // // // // // // // // // //     * You are given several boxes with different colors represented by different
// // // // // // // // // // // //     * positive
// // // // // // // // // // // //     * numbers.
// // // // // // // // // // // //     * You may experience several rounds to remove boxes until there is no
// // // // // // // // // // // //     * box left. Each time you can choose some continuous boxes with the same
// // // // // // // // // // // //     * color (i.e., composed of k boxes, k >= 1 ), remove them and get k * k points.
// // // // // // // // // // // //     * Return the maximum points you can ge
// // // // // // // // // // // //     * @return 
// // // // // // // // // // // //     */

// // // // // // // // // // // //    public static int remove(int[] arr3) {
// // // // // // // // // // // //       int counter = 0; int sum = 0;
// // // // // // // // // // // //       int[] newar = new int[arr3.length - 1];
// // // // // // // // // // // //       int k =0;

// // // // // // // // // // // //       for (int i = 0; i < arr3.length; i++) {
// // // // // // // // // // // //          for (int j = 0; j < arr3.length; j++) {
// // // // // // // // // // // //             if(arr3[i] == arr3[j]){
// // // // // // // // // // // //                newar[k] = arr3[i];
// // // // // // // // // // // //                counter = arr3.length;
// // // // // // // // // // // //                k++;

// // // // // // // // // // // //             }
// // // // // // // // // // // //             // else{
// // // // // // // // // // // //             //    counter = 0;
// // // // // // // // // // // //             // }
// // // // // // // // // // // //             // System.out.println(counter);
// // // // // // // // // // // //          }

// // // // // // // // // // // //       }

// // // // // // // // // // // //       sum += counter * counter;

// // // // // // // // // // // //       return sum;

// // // // // // // // // // // //    }

// // // // // // // // // // // //    public static void main(String[] args) {
// // // // // // // // // // // //       int[] arr = { 1, 2, 1 };
// // // // // // // // // // // //       int[] arr2 = { 2, 0, 2, 1, 1, 0 };
// // // // // // // // // // // //       int[] arr3 = {1,3,2,2,2,3,4,3,1};
// // // // // // // // // // // //       Arrays.sort(arr3);
// // // // // // // // // // // //       for (int i : arr3) {
// // // // // // // // // // // //          System.out.print(i+" ");
// // // // // // // // // // // //       }
// // // // // // // // // // // //       System.out.println();

// // // // // // // // // // // //       int n = arr.length;
// // // // // // // // // // // //       int[] a = concatinate(arr, n);
// // // // // // // // // // // //       int[] b = sort(arr2);
// // // // // // // // // // // //       int c = remove(arr3);
// // // // // // // // // // // //       for (int i : a) {
// // // // // // // // // // // //          System.out.print(i + " ");
// // // // // // // // // // // //       }
// // // // // // // // // // // //       System.out.println();

// // // // // // // // // // // //       // sort problem

// // // // // // // // // // // //       for (int i : b) {
// // // // // // // // // // // //          System.out.print(i + " ");
// // // // // // // // // // // //       }
// // // // // // // // // // // //       System.out.println();
// // // // // // // // // // // //       // remove problem

// // // // // // // // // // // //       System.out.println(c);
// // // // // // // // // // // //    }
// // // // // // // // // // // // }

// // // // // // // // // // // /**
// // // // // // // // // // //  * Main
// // // // // // // // // // //  */
// // // // // // // // // // // import java.util.*;

// // // // // // // // // // // public class Main {

// // // // // // // // // // //    public static void main(String[] args) {
// // // // // // // // // // //       // ArrayList<Integer> list = new ArrayList<Integer>();
// // // // // // // // // // //       // ArrayList<Integer> result = new ArrayList<Integer>();
// // // // // // // // // // //       // list.add(5490);
// // // // // // // // // // //       // list.add(5487);
// // // // // // // // // // //       // list.add(468494);
// // // // // // // // // // //       // // int j = 3;
// // // // // // // // // // //       // for (int i = 0; i < list.size(); i++) {
// // // // // // // // // // //       // if(list.get(i) > list.get(list.size()-1)){
// // // // // // // // // // //       // result.add(i, list.get(i));
// // // // // // // // // // //       // }
// // // // // // // // // // //       // }
// // // // // // // // // // //       // // System.out.print(list);
// // // // // // // // // // //       // System.out.println(result);

// // // // // // // // // // //       // int[] arr = { 1, 2, 3 };
// // // // // // // // // // //       // int[] rev = new int[arr.length];
// // // // // // // // // // //       // int sum = 0;
// // // // // // // // // // //       // int pro = 1;
// // // // // // // // // // //       // for (int i = arr.length -1 ; i >= 0; i--) {
// // // // // // // // // // //       // System.out.println(arr[i]);
// // // // // // // // // // //       // rev[i] = arr[i];
// // // // // // // // // // //       // }
// // // // // // // // // // //       // for (int i = 0; i < rev.length; i++) {
// // // // // // // // // // //       // if (i % 2 == 0) {
// // // // // // // // // // //       // sum += rev[i];
// // // // // // // // // // //       // System.out.println(rev[i] + " " + i);
// // // // // // // // // // //       // } else {
// // // // // // // // // // //       // pro *= rev[i];
// // // // // // // // // // //       // }
// // // // // // // // // // //       // }
// // // // // // // // // // //       // System.out.println(sum + " " + pro);

// // // // // // // // // // //       // int[] a = {1,2,3,4};
// // // // // // // // // // //       // int k =4;
// // // // // // // // // // //       // int ans = 0;
// // // // // // // // // // //       // int ans2 = 0;
// // // // // // // // // // //       // for(int i=0; i<=a.length; i++){
// // // // // // // // // // //       // if(k % 2 ==0){
// // // // // // // // // // //       // ans += a[i]
// // // // // // // // // // //       // ans2 -= a[i+1];

// // // // // // // // // // //       // ans -= a[i]-a[i+1];
// // // // // // // // // // //       // ans2 += a[a.length]+a[a.length-1];
// // // // // // // // // // //       // }
// // // // // // // // // // //       // }
// // // // // // // // // // //       // int finalans = ans - ans2;
// // // // // // // // // // //       // System.out.println(finalans);
// // // // // // // // // // //       // for (int i = 0; i < a.length-1; i++) {
// // // // // // // // // // //       // if (a[i+1]-a[i]==1) {
// // // // // // // // // // //       // remove(a, a[i]);
// // // // // // // // // // //       // }
// // // // // // // // // // //       // }
// // // // // // // // // // //       // if (a.length == 1) {
// // // // // // // // // // //       // System.out.println("yes");
// // // // // // // // // // //       // } else {
// // // // // // // // // // //       // System.out.println("no");
// // // // // // // // // // //       // }
// // // // // // // // // // //       // }

// // // // // // // // // // //       // public static void remove(int[] a, int n) {
// // // // // // // // // // //       // for(int i =0; i< a.length; i++){
// // // // // // // // // // //       // if (n == a[i]) {
// // // // // // // // // // //       // for (int j = i; j < a.length-1; j++) {
// // // // // // // // // // //       // a[j] = a[j+1];
// // // // // // // // // // //       // }break;
// // // // // // // // // // //       // }
// // // // // // // // // // //       // }

// // // // // // // // // // //       int[] a = { 1, 2, 3, 4 };

// // // // // // // // // // //       trans(a);
// // // // // // // // // // //    }

// // // // // // // // // // //    public static void trans(int[] a) {
// // // // // // // // // // //       // for (int i = 0; i < m; i++) {
// // // // // // // // // // //       // for (int j = 0; j < n; j++) {
// // // // // // // // // // //       // if (i == 0 || j == 0 || i == m - 1 || j == n - 1) {
// // // // // // // // // // //       // System.out.print(a[i][j] + " ");
// // // // // // // // // // //       // } else {
// // // // // // // // // // //       // System.out.print(" ");
// // // // // // // // // // //       // }
// // // // // // // // // // //       // }
// // // // // // // // // // //       // // System.out.print();
// // // // // // // // // // //       // }

// // // // // // // // // // //       // array bondry trans

// // // // // // // // // // //       // for (int i = 0; i < m; i++) {
// // // // // // // // // // //       // System.out.print(a[0][i]+" ");
// // // // // // // // // // //       // }
// // // // // // // // // // //       // for (int i = 1; i < n; i++) {
// // // // // // // // // // //       // System.out.print(a[i][m-1]+" ");
// // // // // // // // // // //       // }
// // // // // // // // // // //       // for (int i = m-2; i >= 0; i--) {
// // // // // // // // // // //       // System.out.print(a[m-1][i]+" ");
// // // // // // // // // // //       // }
// // // // // // // // // // //       // if(m>1){
// // // // // // // // // // //       // for (int i = n-2; i > 0; i--) {
// // // // // // // // // // //       // System.out.print(a[i][0]+" ");
// // // // // // // // // // //       // }
// // // // // // // // // // //       // }

// // // // // // // // // // //       int i = 0;
// // // // // // // // // // //       int j = a.length - 1;
// // // // // // // // // // //       int flag = 0;
// // // // // // // // // // //       int key = 3;
// // // // // // // // // // //       int postion = 0;

// // // // // // // // // // //       while (i < j && flag == 0) {
// // // // // // // // // // //          int mid = i + j / 2;
// // // // // // // // // // //          if (a[mid] == key) {
// // // // // // // // // // //             flag = 1;
// // // // // // // // // // //             postion = mid + 1;
// // // // // // // // // // //          }
// // // // // // // // // // //          if (a[mid] > key) {
// // // // // // // // // // //             j = mid - 1;
// // // // // // // // // // //          }
// // // // // // // // // // //          if (a[mid] == key) {
// // // // // // // // // // //             i = mid + 1;

// // // // // // // // // // //          }
// // // // // // // // // // //       }
// // // // // // // // // // //       if (flag == 1) {
// // // // // // // // // // //          System.out.println("find it" + postion);
// // // // // // // // // // //       } else {
// // // // // // // // // // //          System.out.println("not found");
// // // // // // // // // // //       }

// // // // // // // // // // //    }
// // // // // // // // // // // }

// // // // // // // // // // class Main {
// // // // // // // // // //    // int[] findMaximum(int[] arr, int n) {
// // // // // // // // // //    // // code here
// // // // // // // // // //    // int i = 0;
// // // // // // // // // //    // int j = arr.length - 1;

// // // // // // // // // //    // while(i < j){
// // // // // // // // // //    // int mid = (i+j)/2;

// // // // // // // // // //    // if(mid > 0 && mid < n-1){

// // // // // // // // // //    // if(arr[mid] > arr[mid-1] && arr[mid] > arr[mid + 1]){
// // // // // // // // // //    // return arr[mid];
// // // // // // // // // //    // }
// // // // // // // // // //    // if (arr[mid - 1] > arr[mid]){
// // // // // // // // // //    // j = mid - 1;
// // // // // // // // // //    // }
// // // // // // // // // //    // if(arr[mid + 1] > arr[mid]){
// // // // // // // // // //    // i = mid + 1;

// // // // // // // // // //    // }

// // // // // // // // // //    // }
// // // // // // // // // //    // else if(mid == 0){
// // // // // // // // // //    // if(arr[0] > arr[1]){
// // // // // // // // // //    // return 0;
// // // // // // // // // //    // }else{
// // // // // // // // // //    // return 1;
// // // // // // // // // //    // }
// // // // // // // // // //    // }
// // // // // // // // // //    // else if(mid == n-1){
// // // // // // // // // //    // if(arr[n-1] > arr[n-2]){
// // // // // // // // // //    // return n-1;

// // // // // // // // // //    // }else{
// // // // // // // // // //    // return n-2;
// // // // // // // // // //    // }
// // // // // // // // // //    // }
// // // // // // // // // //    // }
// // // // // // // // // //    // }

// // // // // // // // // //    // return arr[n-1];
// // // // // // // // // //    // }

// // // // // // // // // // class Main {
// // // // // // // // // //    static boolean increasearr(int[] arr, int l, int r) {
// // // // // // // // // //       for (int i = l + 1; i <= r; i++) {
// // // // // // // // // //          if (arr[i - 1] > arr[i]) {
// // // // // // // // // //             return false;
// // // // // // // // // //          }
// // // // // // // // // //       }
// // // // // // // // // //       return true;
// // // // // // // // // //    }

// // // // // // // // // //    static boolean drecresarr(int[] arr, int l, int r) {
// // // // // // // // // //       for (int i = l + 1; i <= r; i++) {
// // // // // // // // // //          if (arr[i - 1] < arr[i]) {
// // // // // // // // // //             return false;
// // // // // // // // // //          }
// // // // // // // // // //       }
// // // // // // // // // //       return true;
// // // // // // // // // //    }

// // // // // // // // // //    static boolean decrotate(int[] arr, int n, int min, int max) {
// // // // // // // // // //       if (arr[0] > arr[n - 1]) {
// // // // // // // // // //          return false;
// // // // // // // // // //       }
// // // // // // // // // //       return drecresarr(arr, 0, min) && drecresarr(arr, max, n - 1);
// // // // // // // // // //    }

// // // // // // // // // //    static boolean incrotate(int[] arr, int n, int min, int max) {
// // // // // // // // // //       if (arr[0] < arr[n - 1]) {
// // // // // // // // // //          return false;
// // // // // // // // // //       }
// // // // // // // // // //       return increasearr(arr, 0, max) && increasearr(arr, min, n - 1);
// // // // // // // // // //    }

// // // // // // // // // //    static boolean checkIfSortRotated(int[] arr, int n) {
// // // // // // // // // //       int min = 0;
// // // // // // // // // //       int max = 0;
// // // // // // // // // //       boolean res = false;

// // // // // // // // // //       for (int i = 0; i < arr.length; i++) {
// // // // // // // // // //          if (arr[i] < arr[min]) {
// // // // // // // // // //             min += i;

// // // // // // // // // //          }
// // // // // // // // // //          if (arr[i] > arr[max]) {
// // // // // // // // // //             max += i;
// // // // // // // // // //          }
// // // // // // // // // //       }
// // // // // // // // // //       if (max == min - 1) {
// // // // // // // // // //          res = incrotate(arr, n, min, max);
// // // // // // // // // //       }
// // // // // // // // // //       if (min == max - 1) {
// // // // // // // // // //          res = decrotate(arr, n, min, max);
// // // // // // // // // //       }
// // // // // // // // // //       return false;
// // // // // // // // // //    }

// // // // // // // // // //    public static void main(String[] args) {
// // // // // // // // // //       int[] arr = { 1, 45, 47, 50, 5 };
// // // // // // // // // //       int n = arr.length;
// // // // // // // // // //       checkIfSortRotated(arr, n);
// // // // // // // // // //    }
// // // // // // // // // // }

// // // // // // // // // // import java.io.*; // for handling input/output
// // // // // // // // // // import java.util.*; // contains Collections framework

// // // // // // // // // // // don't change the name of this class
// // // // // // // // // // // you can add inner classes if needed
// // // // // // // // // // class Main {
// // // // // // // // // // public static void main(String[] args) {
// // // // // // // // // // // Your code here
// // // // // // // // // // Scanner sc = new Scanner(System.in);
// // // // // // // // // // String a = sc.next(); // take string and put in varable
// // // // // // // // // // String[] s = a.split(" "); // create string Arrays
// // // // // // // // // // String inp = String.valueOf(s[0]);
// // // // // // // // // // String inp2 = String.valueOf(s[1]);

// // // // // // // // // // // for (int i = 0; i < s.length; i++) {
// // // // // // // // // // // // System.out.print(s[i]+" ");
// // // // // // // // // // // }

// // // // // // // // // // if (inp == "R" && inp2 == "S") {
// // // // // // // // // // System.out.print("R");

// // // // // // // // // // }
// // // // // // // // // // for (int i = 0; i < s.length; i++) {

// // // // // // // // // // if (s[i] == "R" && s[i + 1] == "S") {
// // // // // // // // // // System.out.print("R");
// // // // // // // // // // break;

// // // // // // // // // // } else if (s[i] == "S" && s[i + 1] == "R") {
// // // // // // // // // // System.out.print("R");
// // // // // // // // // // } else if (s[i] == "J" && s[i + 1] == "R") {
// // // // // // // // // // System.out.print("R");
// // // // // // // // // // } else if (s[i] == "M" && s[i + 1] == "R") {
// // // // // // // // // // System.out.print("R");
// // // // // // // // // // } else if (s[i] == "R" && s[i + 1] == "B") {
// // // // // // // // // // System.out.print("R");
// // // // // // // // // // }

// // // // // // // // // // else if (s[i] == "B" && s[i + 1] == "J") {
// // // // // // // // // // System.out.print("B");
// // // // // // // // // // } else if (s[i] == "S" && s[i + 1] == "J") {
// // // // // // // // // // System.out.print("S");
// // // // // // // // // // } else if (s[i] == "M" && s[i + 1] == "J") {
// // // // // // // // // // System.out.print("M");
// // // // // // // // // // } else if (s[i] == "S" && s[i + 1] == "J") {
// // // // // // // // // // System.out.print("S");
// // // // // // // // // // } else {
// // // // // // // // // // System.out.print("D");
// // // // // // // // // // }
// // // // // // // // // // }

// // // // // // // // // // }
// // // // // // // // // // }

// // // // // // // // // /**
// // // // // // // // //  * Main
// // // // // // // // //  */
// // // // // // // // // public class Main {

// // // // // // // // //    public static void main(String[] args) {
// // // // // // // // //       int[] a = { 3, 4, 5, 1, 2 };
// // // // // // // // //       boolean x = Main.check(a);
// // // // // // // // //       if (x == true) {
// // // // // // // // //          System.out.println("yes");
// // // // // // // // //       } else {
// // // // // // // // //          System.out.println("no");
// // // // // // // // //       }
// // // // // // // // //    }

// // // // // // // // //    private static boolean check(int[] a) {

// // // // // // // // //       int count = 0;
// // // // // // // // //       for (int i = 0; i < a.length; i++) {
// // // // // // // // //          if (a[i] > a[(i + 1) % a.length]) {
// // // // // // // // //             count++;

// // // // // // // // //          }

// // // // // // // // //       }
// // // // // // // // //       if (count > 1) {
// // // // // // // // //          return false;
// // // // // // // // //       }
// // // // // // // // //       return true;

// // // // // // // // //    }

// // // // // // // // // }

// // // // // // // // import java.io.*; // for handling input/output
// // // // // // // // import java.util.*; // contains Collections framework

// // // // // // // // // don't change the name of this class
// // // // // // // // // you can add inner classes if needed
// // // // // // // // class Main {
// // // // // // // // 	public static void makeitsmall(int[] a){
// // // // // // // // 		int flag = 0;
// // // // // // // // 		int counter  = 0;
// // // // // // // // 		for (int i = 0; i < a.length-1; i++) {
// // // // // // // // 			for(int j =i+1; j< a.length; j++){
// // // // // // // // 				if (Math.abs(a[j]-a[i]) == 1) {
// // // // // // // // 					// remove(a, a[i]);
// // // // // // // // 					counter ++;
// // // // // // // // 					flag = 1;
// // // // // // // // 				}
// // // // // // // // 			}
// // // // // // // //       }

// // // // // // // //       if (counter == a.length - 1) {
// // // // // // // //          System.out.println("YES");
// // // // // // // //       } else {
// // // // // // // //          System.out.println("NO");
// // // // // // // //       }
// // // // // // // // 	}

// // // // // // // // 	public static int partion(int[] a, int st, int en){
// // // // // // // // 		int pivot = a[st];
// // // // // // // // 		while(a[st] < pivot){
// // // // // // // // 			st++;

// // // // // // // // 		}
// // // // // // // // 		while(a[en] > pivot){
// // // // // // // // 			en--;
// // // // // // // // 		}
// // // // // // // // 		if(st<= en){
// // // // // // // // 			int temp = a[st];
// // // // // // // // 			a[st] = a[en];
// // // // // // // // 			a[en] = temp;
// // // // // // // // 			st++;
// // // // // // // // 			en--;
// // // // // // // // 		}

// // // // // // // // 	return st;
// // // // // // // // 	}

// // // // // // // // 	public static int[] quick(int[] a, int st, int en){

// // // // // // // // 		int pi = partion(a, st, en);
// // // // // // // // 		if(st < en - 1){
// // // // // // // // 			quick(a,st,pi-1);
// // // // // // // // 		}
// // // // // // // // 		if(st < en){
// // // // // // // // 			quick(a, pi, en);
// // // // // // // // 		}
// // // // // // // // 		return a;
// // // // // // // // 	}

// // // // // // // // 	public static void main (String[] args) {
// // // // // // // //                       // Your code here
// // // // // // // // 					  Scanner sc = new Scanner(System.in);
// // // // // // // // 					  try {
// // // // // // // //                   int size = sc.nextInt();
// // // // // // // //                   int[] a = new int[size];
// // // // // // // //                   for(int i =0; i<size; i++){
// // // // // // // //                      a[i] = sc.nextInt();
// // // // // // // //                   }
// // // // // // // //                   int st = 0;
// // // // // // // //                   int en = a.length - 1;
// // // // // // // //                   quick(a, st, en);

// // // // // // // //                   makeitsmall(a);

// // // // // // // //                  } catch (Exception e) {

// // // // // // // //                     return ;
// // // // // // // //                  }
// // // // // // // // 	}
// // // // // // // // }

// // // // // // // import java.io.*; // for handling input/output
// // // // // // // import java.util.*; // contains Collections framework

// // // // // // // // don't change the name of this class
// // // // // // // // you can add inner classes if needed
// // // // // // // class Main {

// // // // // // //    public static int[][] Camp(int[][] a) {
// // // // // // //       return a;
// // // // // // //    }

// // // // // // //    public static void main(String[] args) {
// // // // // // //       try (// Your code here
// // // // // // //             Scanner sc = new Scanner(System.in)) {
// // // // // // //          int n = sc.nextInt();
// // // // // // //          int[][] a = new int[n][2];
// // // // // // //          for (int i = 0; i < a.length; i++) {
// // // // // // //             for (int j = 0; j < a.length - 1; j++) {
// // // // // // //                a[i][j] = sc.nextInt();
// // // // // // //             }
// // // // // // //          }
// // // // // // //          int sub = 0;
// // // // // // //          int sum = 0;
// // // // // // //          int min = Integer.MAX_VALUE;
// // // // // // //          int i = 0;
// // // // // // //          int j = 0;
// // // // // // //          Arrays.sort(a, new Comparator<int[]>() {

// // // // // // //             @Override
// // // // // // //             // Compare values according to columns
// // // // // // //             public int compare(final int[] entry1,
// // // // // // //                   final int[] entry2) {

// // // // // // //                // To sort in descending order revert
// // // // // // //                // the '>' Operator
// // // // // // //                if (entry1[i] > entry2[j])
// // // // // // //                   return 1;
// // // // // // //                else
// // // // // // //                   return -1;
// // // // // // //             }
// // // // // // //          });
// // // // // // //          System.out.println();
// // // // // // //          for (int ii = 0; ii < a.length; ii++) {
// // // // // // //             for (int jj = 0; jj < a[ii].length; jj++)
// // // // // // //                System.out.print(a[ii][jj] + " ");
// // // // // // //             System.out.println();
// // // // // // //          }
// // // // // // //       }
// // // // // // //    }
// // // // // // // }   

// // // // // // // import java.io.*; // for handling input/output
// // // // // // // import java.util.*; // contains Collections framework

// // // // // // // // don't change the name of this class
// // // // // // // // you can add inner classes if needed
// // // // // // // class Main {

// // // // // // //    public static boolean check(int a, int t, int c, int g, int occ) {
// // // // // // //       if (a > occ || t > occ || c > occ || g > occ) {
// // // // // // //          return false;
// // // // // // //       }
// // // // // // //       return true;
// // // // // // //    }

// // // // // // //    public static boolean findFatal(String str, int len) {
// // // // // // //       int a, t, c, g;
// // // // // // //       a = t = c = g = 0;

// // // // // // //       for (int i = 0; i < str.length(); i++) {
// // // // // // //          char ch = str.charAt(i);
// // // // // // //          if (ch == 'A')
// // // // // // //             a++;
// // // // // // //          if (ch == 'C')
// // // // // // //             c++;
// // // // // // //          if (ch == 'T')
// // // // // // //             t++;
// // // // // // //          if (ch == 'G')
// // // // // // //             g++;

// // // // // // //       }

// // // // // // //       for (int i = 0; i < len; i++) {
// // // // // // //          char ch = str.charAt(i);
// // // // // // //          if (ch == 'A')
// // // // // // //             a--;
// // // // // // //          if (ch == 'C')
// // // // // // //             c--;
// // // // // // //          if (ch == 'T')
// // // // // // //             t--;
// // // // // // //          if (ch == 'G')
// // // // // // //             g--;
// // // // // // //       }

// // // // // // //       int s = 0;
// // // // // // //       int e = len;

// // // // // // //       while (s != str.length()) {
// // // // // // //          if (check(a, t, c, g, str.length() / 4)) {
// // // // // // //             return true;
// // // // // // //          }
// // // // // // //          char ch = str.charAt(s);

// // // // // // //          if (ch == 'A')
// // // // // // //             a++;
// // // // // // //          if (ch == 'C')
// // // // // // //             c++;
// // // // // // //          if (ch == 'T')
// // // // // // //             t++;
// // // // // // //          if (ch == 'G')
// // // // // // //             g++;

// // // // // // //          ch = str.charAt(e);
// // // // // // //          if (ch == 'A')
// // // // // // //             a--;
// // // // // // //          if (ch == 'C')
// // // // // // //             c--;
// // // // // // //          if (ch == 'T')
// // // // // // //             t--;
// // // // // // //          if (ch == 'G')
// // // // // // //             g--;

// // // // // // //          s++;
// // // // // // //          e++;

// // // // // // //       }
// // // // // // //       return false;
// // // // // // //    }

// // // // // // //    public static void main(String[] args) {
// // // // // // //       // Your code here
// // // // // // //       Scanner sc = new Scanner(System.in);
// // // // // // //       int n = sc.nextInt();
// // // // // // //       String nextlineinp = sc.nextLine();

// // // // // // //       String str = sc.nextLine();

// // // // // // //       int s = 0;
// // // // // // //       int e = n;
// // // // // // //       int ans = 0;

// // // // // // //       while (s < e) {
// // // // // // //          int m = (s + e) / 2;
// // // // // // //          if (findFatal(str, m)) {
// // // // // // //             e = m;
// // // // // // //             ans = m;
// // // // // // //          } else {
// // // // // // //             s = m + 1;
// // // // // // //          }
// // // // // // //       }

// // // // // // //       System.out.print(ans);
// // // // // // //    }
// // // // // // // }

// // // // // // // contains Collections framework
// // // // // // import java.util.Arrays;
// // // // // // import java.util.Scanner;

// // // // // // // don't change the name of this class
// // // // // // // you can add inner classes if needed
// // // // // // class Main {
// // // // // //    // public static boolean findingTrust(int[] arr, int m) {
// // // // // //    //    int ntt = m;
// // // // // //    //    for (int bh = 0; bh < arr.length; bh++) {
// // // // // //    //       if (m < arr[bh]) {
// // // // // //    //          int nt = ntt - (arr[bh] - ntt);
// // // // // //    //          ntt = nt;
// // // // // //    //          if (ntt == 0) {
// // // // // //    //             return false;
// // // // // //    //          } else {
// // // // // //    //             return true;
// // // // // //    //          }
// // // // // //    //       }
// // // // // //    //       if (m >= arr[bh]) {
// // // // // //    //          int nt = ntt + (ntt - arr[bh]);
// // // // // //    //          ntt = nt;
// // // // // //    //          if (ntt == 0) {
// // // // // //    //             return false;
// // // // // //    //          } else {
// // // // // //    //             return true;
// // // // // //    //          }
// // // // // //    //       }
// // // // // //    //    }
// // // // // //    //    return true;
// // // // // //    // }

// // // // // //    public static void main(String[] args) {

// // // // // //    }
// // // // // // }

// // // // // import java.io.*; // for handling input/output
// // // // // import java.util.*; // contains Collections framework

// // // // // // don't change the name of this class
// // // // // // you can add inner classes if needed
// // // // // class Main {
// // // // //    static void swap(int[] arr, int i, int j) {
// // // // //       int temp = arr[i];
// // // // //       arr[i] = arr[j];
// // // // //       arr[j] = temp;
// // // // //    }

// // // // //    public static void main(String[] args) {
// // // // //       // Your code here
// // // // //       try (// Your code here
// // // // //             Scanner sc = new Scanner(System.in)) {
// // // // //          int n = sc.nextInt();
// // // // //          int[] arr = new int[n + 1];
// // // // //          HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();

// // // // //          for (int i = 0; i < arr.length; i++) {
// // // // //             hm.put(arr[i], i);

// // // // //          }
// // // // //          int counter = 0;

// // // // //          for (int i = 0; i < arr.length; i++) {
// // // // //             while (hm.get(arr[i]) != i) {
// // // // //                counter++;
// // // // //                swap(arr, hm.get(arr[i]), i);
// // // // //             }
// // // // //          }
// // // // //          System.out.println(counter);

// // // // //       }

// // // // //    }

// // // // // }

// // // // import java.io.*; // for handling input/output
// // // // import java.util.*; // contains Collections framework

// // // // // don't change the name of this class
// // // // // you can add inner classes if needed
// // // // class Main {

// // // //    public static void main(String[] args) throws IOException {

// // // //       BufferedReader sc = new BufferedReader(new InputStreamReader(System.in));
// // // //       int T = Integer.parseInt(sc.readLine());
// // // //       while (T != 0) {
// // // //          int n = Integer.parseInt(sc.readLine());
// // // //          int[] arr = new int[n];
// // // //          String str[] = sc.readLine().split(" ");

// // // //          for (int i = 0; i < arr.length; i++) {
// // // //             arr[i] = Integer.parseInt(str[i]);
// // // //          }

// // // //          int max = arr[0], indMax = 0;

// // // //          for (int i = 0; i < n; i++) {
// // // //             if (arr[i] > max) {
// // // //                max = arr[i];
// // // //                indMax = i;
// // // //             }
// // // //          }
// // // //          int temp = arr[0];
// // // //          arr[0] = arr[indMax];
// // // //          arr[indMax] = temp;

// // // //          max = arr[1];
// // // //          indMax = 1;

// // // //          for (int i = 1; i < n; i++) {
// // // //             if (arr[i] > max) {
// // // //                max = arr[i];
// // // //                indMax = i;
// // // //             }
// // // //          }
// // // //          temp = arr[1];
// // // //          arr[1] = arr[indMax];
// // // //          arr[indMax] = temp;

// // // //          max = arr[2];
// // // //          indMax = 2;

// // // //          for (int i = 2; i < n; i++) {
// // // //             if (arr[i] > max) {
// // // //                max = arr[i];
// // // //                indMax = i;
// // // //             }
// // // //          }

// // // //          temp = arr[2];
// // // //          arr[2] = arr[indMax];
// // // //          arr[indMax] = temp;

// // // //          System.out.println(arr[0] + " " + arr[1] + " " + arr[2]);
// // // //          T--;

// // // //       }

// // // //    }
// // // // }

// // // import java.io.*; // for handling input/output
// // // import java.util.*; // contains Collections framework

// // // // don't change the name of this class
// // // // you can add inner classes if needed
// // // class Main {

// // //    public static void main(String[] args) {
// // //       // Your code here

// // //       // BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
// // //       // int T = Integer.parseInt(br.readLine());
// // //       Scanner sc = new Scanner(System.in);
// // //       int t = sc.nextInt();

// // //       for (int T = 0; T < t; T++) {

// // //          int n = sc.nextInt();
// // //          int m = sc.nextInt();
// // //          int[][] a = new int[n][m];
// // //          for (int i = 0; i < n; i++) {
// // //             for (int j = 0; j < m; j++) {
// // //                a[i][j] = sc.nextInt();
// // //             }

// // //          }
// // //          if (n == 1) {
// // //             for (int i = 0; i < m; i++) {
// // //                System.out.print(a[0][i] + " ");
// // //             }
// // //             System.out.println();
// // //             continue;
// // //          }
// // //          if (m == 1) {
// // //             for (int i = 0; i < n; i++) {
// // //                System.out.print(a[i][0] + " ");
// // //             }
// // //             System.out.println();
// // //             continue;
// // //          }
// // //          for (int i = 0; i < m; i++) {
// // //             System.out.print(a[0][i] + " ");
// // //          }
// // //          for (int i = 1; i <= n - 1; i++) {
// // //             System.out.print(a[i][m - 1] + " ");
// // //          }
// // //          for (int i = m - 2; i >= 0; i--) {
// // //             System.out.print(a[n - 1][i] + " ");
// // //          }
// // //          for (int i = n - 2; i >= 1; i--) {
// // //             System.out.print(a[i][0] + " ");
// // //          }
// // //          System.out.println();

// // //       }

// // //    }

// // // }

// // // static class Student {
// // //    // Enter your code here
// // //    String name;
// // //    int eng, maths, hindi;
// // // }

// // //    static Student[] createStudentArray(int n) {
// // //       // Enter your code here
// // //       Student[] st = new Student[n];

// // //       for (int i = 0; i < n; i++) {
// // //          st[i] = new Student();
// // //          st[i].name = sc.next();
// // //          st[i].eng = sc.nextInt();
// // //          st[i].maths = sc.nextInt();
// // //          st[i].hindi = sc.nextInt();
// // //       }
// // //       return st;
// // //    }

// // //    static int engAverage(Student st[], int n) {
// // //       // Enter your code here
// // //       int avg = 0;
// // //       for (int i = 0; i < n; i++) {
// // //          avg += st[i].eng;

// // //       }
// // //       return avg / n;
// // //    }

// // //    static int avgPercentageOfClass(Student st[], int n)
// // //     {
// // //         //Enter your code here
// // //     }

// // // import java.io.*; // for handling input/output
// // // import java.util.*; // contains Collections framework

// // // // don't change the name of this class
// // // // you can add inner classes if needed
// // // class Main {
// // // 	public static void main (String[] args) {

// // //       Scanner sc = new Scanner(System.in);
// // //       int n = sc.nextInt();

// // //       int[] a = new int[n];
// // //       for (int i = 0; i < a.length; i++) {
// // //          a[i] = sc.nextInt();
// // //       }

// // //       minOperationUtil(a, n);

// // // 	}

// // //    private static void minOperationUtil(int[] a, int n) {

// // //       int[] b = new int[n];

// // //       for (int i = 0; i < b.length; i++) {
// // //          b[i] = a[i];
// // //       }
// // //       Arrays.sort(b);

// // //       if (a.equals(b)) {
// // //          System.out.print("0");
// // //       } else {
// // //          System.out.println(minoperation(a, b, 0, 0));
// // //       }
// // //    }

// // //    private static int minoperation(int[] a, int[] b, int i, int j) {
// // //       if(a.equals(b))
// // //       return 0;

// // //       if (i >= a.length || j >= b.length) {
// // //          return 0;
// // //       }
// // //       if (a[i] < b[j]) {
// // //          return 1 + minoperation(a, b, i+1, j+1);
// // //       }

// // //       return Math.max(minoperation(a, b, i, j+1), minoperation(a, b, i+1, j));
// // //    }
// // // }

// // // import java.io.*; // for handling input/output
// // // import java.util.*; // contains Collections framework

// // // // don't change the name of this class
// // // // you can add inner classes if needed
// // // class Main {
// // //    public static String permutation(int a, int k) {
// // //       List<Integer> nums = new ArrayList<Integer>();
// // //       int fact = 1;

// // //       for (int i = 1; i <= a; i++) {
// // //          nums.add(i);
// // //          fact *= i;

// // //       }
// // //       k--;
// // //       fact /= a;

// // //       StringBuilder sb = new StringBuilder();

// // //       for (int i = a - 1; i >= 1; i--) {
// // //          int curr = k / fact;
// // //          sb.append(String.valueOf(nums.get(curr)));
// // //          nums.remove(curr);

// // //          k %= fact;
// // //          fact /= i;

// // //       }
// // //       sb.append(String.valueOf(nums.get(0)));

// // //       return sb.toString();

// // //    }

// // //    public static void main(String[] args) {

// // //       Scanner sc = new Scanner(System.in);
// // //       String ns = sc.nextLine();
// // //       String[] n = ns.split(" ");
// // //       int a = Integer.parseInt(n[0]);
// // //       int k = Integer.parseInt(n[1]);

// // //       System.out.print(permutation(a, k));

// // //    }
// // // }

// // // class Solution {

// // //    public int help(int[] prices) {
// // //       int net_profit = 0;
// // //       for (int i = 0; i < prices.length; i++) {
// // //          if (prices[i] > prices[i - 1]) {
// // //             net_profit = prices[i] - prices[i - 1];
// // //          }
// // //       }
// // //       return net_profit;
// // //    }

// // //    public int maxProfit(int k, int[] prices) {

// // //       if (k <= 0 || prices.length <= 0) {
// // //          return 0;
// // //       }
// // //       if (k > prices.length / 2) {
// // //          return help(prices);
// // //       }

// // //       int minp[] = new int[k];
// // //       int maxp[] = new int[k];

// // //       for (int i = 0; i < k; i++) {
// // //          minp[i] = Integer.MAX_VALUE;
// // //          maxp[i] = 0;
// // //       }

// // //       for (int j = 0; j < prices.length; j++) {
// // //          for (int i = 0; i < k; i++) {

// // //             minp[i] = Math.min(minp[i], prices[i] - (i > 0 ? maxp[i - 1] : 0));
// // //             maxp[i] = Math.max(maxp[i], prices[i] - minp[i]);
// // //          }
// // //       }

// // //       return maxp[k - 1];
// // //    }
// // // }

// // // class Main{

// // //    public static int maxProfit(int k, int[] arr) {
// // // //       if (prices.length == 0) {
// // // //          return 0;
// // //       }
// // //       int n = prices.length;

// // //       int[][] dp = new int[k + 1][n];

// // //       for (int i = 0; i <= k; i++) {
// // //          int max = Integer.MAX_VALUE;

// // //          for (int j = 0; j < prices.length; j++) {
// // //             max = Math.max(max, dp[i-1][j - 1]-prices[j-1]);
// // //             dp[i][j] = Math.max(max + prices[j], dp[i][j-1]);
// // //          }
// // //       }
// // //       return dp[k][n - 1];
// // //    }

// // //    }
// // // }

// // // import java.io.*; // for handling input/output
// // // import java.util.*; // contains Collections framework

// // // // don't change the name of this class
// // // // you can add inner classes if needed
// // // class Main {

// // //    public static int Camp(int[][] a) {
// // //       int sub = 0;
// // //       int sum = 0;
// // //       int min = Integer.MAX_VALUE;
// // //       for (int i = 0; i < a.length; i++) {
// // //          for (int j = i; j < a.length-1; j++) {
// // //             System.out.print(a[i][j] + " ");
// // //             sub = Math.abs(a[i][j] - a[i + 1][j]);
// // //             sum = Math.abs(a[i][j] - a[i][j + 1]);
// // //             int ans = sub + sum;
// // //             if (ans < min) {
// // //                min = ans;
// // //             }

// // //          }
// // //       }
// // //       return min;
// // //    }

// // //    public static void main(String[] args) {
// // //       try (// Your code here
// // //             Scanner sc = new Scanner(System.in)) {
// // //          int n = sc.nextInt();
// // //          int[][] a = new int[n][2];
// // //          for (int i = 0; i < a.length; i++) {
// // //             for (int j = 0; j < a.length - 1; j++) {
// // //                a[i][j] = sc.nextInt();
// // //             }
// // //          }

// // //          System.out.print(Camp(a));
// // //       }

// // //    }
// // // }

// // // class Main {
// // //    public static int countKDifference(int[] nums, int k) {
// // //       int count = 0;

// // //       int i = 0;

// // //       int j = nums.length - 1;

// // //       while (i <= j) {
// // //          if (Math.abs(nums[i] - nums[j]) > k) {
// // //             j--;
// // //          } else if (Math.abs(nums[i] - nums[j]) < k) {
// // //             i++;
// // //          } else if (Math.abs(nums[i] - nums[j]) == k) {
// // //             count++;
// // //          }
// // //       }
// // //       return count;
// // //    }

// // //    public static void main(String[] args) {

// // //       int[] nums = { 3, 2, 1, 5, 4 };
// // //       int k = 2;
// // //       Arrays.sort(nums);
// // //       System.out.print(countKDifference(nums, k));
// // //    }
// // // }

// // // import java.io.*; // for handling input/output
// // // import java.sql.Array;
// // // import java.util.*; // contains Collections framework

// // // // don't change the name of this class
// // // // you can add inner classes if needed
// // // class Main {
// // //    public static String permutation(int a, int k) {
// // //       int fact = 1;

// // //       List<Integer> nums = new ArrayList<Integer>();

// // //    //    for (int i = 1; i <= a; i++) {

// // //    //       fact *= i;
// // //    //       nums.add(i);
// // //    //    }
// // //    //    String ans = "";
// // //    //    k = k - 1;

// // //    //    while (true) {
// // //    //       ans += nums.get(k / fact);
// // //    //       nums.remove(k / fact);
// // //    //       if (nums.size() == 0) {
// // //    //          break;
// // //    //       }
// // //    //       k = k % fact;
// // //    //       fact = fact / nums.size();
// // //    //    }

// // //    //    return ans;

// // //    // }

// // // public static int[] name(String boxes) {
// // //    class Solution {
// // //       public int countNegatives(int[][] grid) {
// // //          // int m=grid.length;
// // //          // int count=0;
// // //          // int n=grid[0].length ;

// // //          // for(int i=0;i<m;i++)
// // //          // {
// // //          // int start=0;
// // //          // int end=n-1;
// // //          // int mid=start + (end-start)/2;

// // //          // int index=-1;

// // //          // while(start<=end)
// // //          // {
// // //          // mid=start + (end-start)/2;
// // //          // if(grid[i][mid]<0)
// // //          // {
// // //          // index=mid;
// // //          // end=mid-1;
// // //          // }
// // //          // else
// // //          // {
// // //          // start=mid+1;
// // //          // }
// // //          // }
// // //          // if(index!=-1)
// // //          // count=count+(n-index);

// // //          // }
// // //          // return count;
// // //          // }

// // //          int m = grid.length;
// // //          int n = grid[0].length;
// // //          int count = 0;

// // //          for (int i = 0; i < m; i++) {

// // //             int st = 0;
// // //             int en = n - 1;
// // //             int mid = (st + en) / 2;
// // //             int index = -1;

// // //             while (st <= en) {

// // //                mid = (st + en) / 2;

// // //                if (grid[st][mid] < 0) {
// // //                   index = mid;
// // //                   en = mid - 1;
// // //                } else {
// // //                   st = mid + 1;
// // //                }
// // //             }
// // //             if (index != -1) {
// // //                count += n - index;
// // //             }
// // //             return count;

// // //          }

// // //       }

// // //       }
// // //    }

// // //    public static void main(String[] args) {

// // //       Scanner sc = new Scanner(System.in);
// // //       // String ns = sc.nextLine();
// // //       // String[] n = ns.split(" ");
// // //       // int a = Integer.parseInt(n[0]);
// // //       // long k = Integer.parseInt(n[1]);
// // //       int a = sc.nextInt();
// // //       int k = sc.nextInt();

// // //       System.out.print(permutation(a, k));

// // //    }

// // // }

// // // class Main{

// // //    public static void uniq(int[] arr) {
// // //       // HashMap<Integer, Integer> unique = new HashMap<>();

// // //       // for (int i = 0; i < arr.length; i++) {

// // //       //    unique.put(arr[i], i);

// // //       //    }
// // //    System.out.println(unique.keySet());

// // // }

// // // HashSet<Integer> hashset = new HashSet<>();

// // //       // for(int i = 0 ; i < arr.length; i++){
// // //       //    if(!hashset.contains(arr[i])){
// // //       //       hashset.add(arr[i]);
// // //       //    }
// // //       // }
// // //       // System.out.println(hashset);

// // //       for (int i = 0; i < arr.length; i++) {

// // //          int index = 0;

// // //          for (int j = 0; j < arr.length; j++) {

// // //             if (arr[j]  > arr[index]) {

// // //                index = j;

// // //             }
// // //             int temp = arr[j];
// // //             arr[j] = arr[index];
// // //             arr[index] = temp;
// // //          }
// // //       }
// // //       for (int i : arr) {
// // //          System.out.print(i+" ");
// // //       }   

// // //    }
// // //    public static void main(String[] args) {
// // //       int arr[] = { 4,5,5,4,5,6,5,8,4,7};

// // //       uniq(arr);

// // //    }
// // // }

// // /**
// //  * Code 1: Find all pairs whose elements sum is equal to the target sum.
// // input: {1 2 3 4 5 6}    int k = 7;
// // Output: {1,6} {2,5} {3,4}
// //  * 
// //  * 
// //  */

// // /**
// //  * Main
// //  */
// // //  public class Main {

// // // //    public static void main(String[] args) {
// // // //       int[] arr = {1, 2, 3 ,4, 5, 6};
// // // //       int k = 7;
// // // //       int n = arr.length;
// // // //       findAllPair(arr, n, k);
// // // //    }

// // // //    private static void findAllPair(int[] arr, int n, int k) {

// // // //       int i = 0; int j = n -1;

// // // //       while(i<=j){
// // // //          if(arr[i]+arr[j] == k){
// // // //             System.out.println(arr[i]+ " "+arr[j]);

// // // //          }

// // // //          if(arr[i]+arr[j] > k){
// // // //             j--;
// // // //          }else{
// // // //             i++;
// // // //          }
// // // //       }

// // // //    }
// // // //  }

// // // /**
// // //  * Code 2: Sort the array in a way all odd numbers came first in ascending order and all even numbers came in descending order.
// // // Input: {1 6 2 7 3 9 8 4}
// // // Output: {1 3 7 9 8 6 4 2}
// // //  */

// // // import java.util.*;
// // // public class Main {

// // //    public static void sort(int[] arr, int n) {

// // //       for(int i = 0; i < n; i++){
// // //          if((arr[i] & 1) !=0 ){
// // //             arr[i] *= -i;

// // //          }
// // //          Arrays.sort(arr);

// // //          for (int j = 0; j < arr.length; j++) {

// // //             if ((arr[i] & 1) !=0) {
// // //                arr[i] *= -i;
// // //             }
// // //          }
// // //       }

// // //    }
// // //    public static void main(String[] args) {
// // //       int[] arr = {1, 6, 2, 7, 3, 9, 8, 4};
// // //       int n = arr.length - 1;

// // //       Main obj = new Main();
// // //       obj.sort(arr, n);

// // //       for (int i : arr) {
// // //          System.out.print(i+" ");
// // //       }

// // //       System.out.print(Arrays.toString(arr));

// // //    }

// // // }

// // /**
// //  * Code 3: Find the maximum repeated element from the array, if multiple element have the same high-frequency return a big number.
// // Input: {1 6 4 2 7 4 2 3 9 2 8 4}
// // Output: 4
// //  */

// // import java.util.HashMap;
// // import java.util.Map;

// // public class Main {

// //    // public static int maxfreq(int[] arr, int n) {
// //    // Map<Integer, Integer> hp = new HashMap<>();

// //    // for( int i = 0; i < n; i++){

// //    // int key = arr[i];

// //    // if(hp.containsKey(key)){
// //    // int fre = hp.get(key);
// //    // fre++;
// //    // hp.put(key, fre);
// //    // }else{
// //    // hp.put(key, 1);
// //    // }
// //    // }
// //    // int max_count = 0; int res = - 1;

// //    // for (java.util.Map.Entry<Integer, Integer> val : hp.entrySet()) {

// //    // if(max_count < val.getValue()){
// //    // res = val.getValue();

// //    // max_count = val.getValue();
// //    // }
// //    // }

// //    // return res;

// //    // public static void hashing(int[] arr, int n) {
// //    //    HashMap<Integer, Integer> hashMap = new HashMap<>();

// //    //    for (int i = 0; i < arr.length; i++) {
// //    //       hashMap.put(arr[i], i);
// //    //    }
// //    //    hashMap.put(548, 5487);
// //    //    hashMap.put(549, 5487);

// //    //    hashMap.put(550, 5487);

// //    //    hashMap.put(551, 5487);

// //    //    for (int i : hashMap.keySet()) {
// //    //       System.out.print(i + " ");
// //    //    }
// //    //    System.out.println(hashMap);
// //    // }

// //    // public static List<List<Integer>> fourSum(int[] nums, int target) {
// //    //    HashSet<List<Integer>> res = new HashSet<>();
// //    //    if (nums.length == 0) {
// //    //       return new ArrayList<>(res);
// //    //    }

// //    //    Arrays.sort(nums);

// //    //    for (int i = 0; i < nums.length - 3; i++) {
// //    //       for (int j = 1; j < nums.length - 2; i++) {
// //    //          int k = j + 1;
// //    //          int l = nums.length - 1;

// //    //          while (k < l) {

// //    //             int sum = nums[i] + nums[j] + nums[k] + nums[l];

// //    //             if (sum == 0) {
// //    //                res.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));

// //    //                // k++;
// //    //                // l--;

// //    //             } else if (sum > 0) {
// //    //                l--;
// //    //             } else {
// //    //                k++;
// //    //             }
// //    //          }

// //    //       }

// //    //    }
// //    //    return new ArrayList<>(res);

// //    // }

// //    public static ArrayList<String> powerSet(String s)
// // {
// //         // Your code here

// //        return rec(s, 0, "");
// // }
// // public static ArrayList<String> rec(String s, int ind, String subset){
// //         if(ind == s.length()){

// //                 return null ;
// //         }
// //         rec(s, ind+1, subset + s.charAt(ind));

// //         return rec(s, ind + 1, subset);

// // }

// //    public static void main(String[] args) {
// //       String[] arr = {"abs"};
// //       int n = 0;
// //       powerSet(arr, n);
// //       // for (int i : arr) {
// //       // System.out.println(i);
// //       // }

// //    }
// //    private static void powerSet(String[] arr, int n) {
// //    }
// // }

// // /**
// //  * MyHashMap
// //  */
// // public class hashMap {

// //    class Entry{

// //       public int key;
// //       public int val;

// //       public Entry(int key, int val) {
// //          this.key = key;
// //          this.val = val;
// //       }
// //    }
// // }

// /**
//  * sort the array in a way all odd numbers came first in ascending order and all
//  * even numbers came in descending order.
//  * Input: {1 6 2 7 3 9 8 4}
//  * Output: {1 3 7 9 8 6 4 2}
//  */
// public class Main {

//    // public static int[] arrA;

//    // public void solve() {
//    //    separateOddEven(0, arrA.length - 1);
//    //    int i = 0;
//    //    while (arrA[i] % 2 != 0) {
//    //       i++;
//    //       if (i == arrA.length - 1)
//    //          break;
//    //    }
//    //    if (i != arrA.length - 1) {
//    //       customizedSort(0, i - 1);
//    //    } else {
//    //       customizedSort(0, i);
//    //    }
//    //    customizedSort(i, arrA.length - 1);
//    // }

//    // public void separateOddEven(int low, int high) {
//    //    int i = low;
//    //    int j = high;
//    //    while (i < j) {
//    //       while (i < high && arrA[i] % 2 != 0) {
//    //          i++;
//    //       }
//    //       while (j > low && arrA[j] % 2 == 0) {
//    //          j--;
//    //       }
//    //       if (i <= j) {
//    //          swap(i, j);
//    //          i++;
//    //          j--;
//    //       }
//    //    }
//    // }

//    // // mergersort use for sorting
//    // public void customizedSort(int low, int high) {
//    //    int mid = (low + high) / 2;
//    //    int left = low;
//    //    int right = high;
//    //    int pivot = arrA[mid]; // select middle element as pivot
//    //    while (left <= right) {
//    //       if (arrA[left] % 2 == 0) {
//    //          while (arrA[left] > pivot)
//    //             left++;// find element which is greater than pivot
//    //          while (arrA[right] < pivot)
//    //             right--;
//    //       } else if (arrA[left] % 2 != 0) {
//    //          while (arrA[left] < pivot)
//    //             left++;// find element which is greater than pivot
//    //          while (arrA[right] > pivot)
//    //             right--;
//    //       }

//    //       if (left <= right) {
//    //          int temp = arrA[left];
//    //          arrA[left] = arrA[right];
//    //          arrA[right] = temp;
//    //          left++;
//    //          right--;
//    //       }
//    //    }
//    //    // Recursion on left and right of the pivot
//    //    if (low < right)
//    //       customizedSort(low, right);
//    //    if (left < high)
//    //       customizedSort(left, high);
//    // }

//    // public void swap(int i, int j) {

//    //    if (i < j) {
//    //       int temp = arrA[i];
//    //       arrA[i] = arrA[j];
//    //       arrA[j] = temp;
//    //    }

//    // }

//    // public void printArray(int[] arrA) {
//    //    for (int i = 0; i < arrA.length; i++) {
//    //       System.out.print(" " + arrA[i]);
//    //    }
//    // }

// //    public static void main(String args[]) {
// // 		int[] a = new int[] {1, 6, 2, 7, 3, 9, 8, 2, 4};
// //       int n = a.length;

// // 		System.out.println("\nOutput Array : ");
// // 		Main.frequency(a, n);

// //    }

// //    private static void frequency(int[] a, int n) {
// //       HashMap<Integer, Integer> result  = new HashMap<>();
// //       int count = 0;

// //       for(int i = 0 ; i < n; i++){
// //          if(result.containsKey(a[i])){
// //             count++;
// //             result.put(a[i], result.get(a[i]+1));

// //          }else{
// //             result.put(a[i], i);
// //          }
// //       }
// //      System.out.println(count);

// //    }

// // }\

/**
 * Main
 */
// public class Main {

// public static void kthsum(int[] array, int k) {

// // for (int i = 0; i < array.length; i++) {
// // for (int j = i+ 1; j < array.length; j++) {
// // if(array[i]+array[j] == k){
// // System.out.println(array[i]+" "+array[j]);
// // }
// // }
// // }
// HashMap<Integer, Integer> mp = new HashMap<>();
// for(int i = 0; i < array.length; i++){
// int rem = k - array[i];

// if (mp.containsKey(rem)) {
// int count = mp.get(rem);

// for(int j = 0; j < count; j++) {
// System.out.println(rem + " " + array[i]);
// }
// }
// if(mp.containsKey(array[i])){
// mp.put(array[i], mp.get(array[i] )+ 1);
// }else{
// mp.put(array[i], 1);
// }
// }

// // int i = 0; int j = array.length - 1;

// // while (i < j) {
// // if(array[i]+array[j] == k){
// // System.out.println(array[i]+" "+array[j]);
// // }
// // if (array[i] + array[j] > k) {
// // j--;

// // } else {
// // i++;
// // }

// }

// public static void mergersorted(int[] array1, int[] array2, int n, int m) {

// Map<Integer, Boolean> mp = new TreeMap<Integer, Boolean>();

// for (int i = 0; i < n; i++) {
// mp.put(array1[i], true);
// }
// for (int i = 0; i < m; i++) {
// mp.put(array2[i], true);
// }

// for (Map.Entry<Integer, Boolean> i : mp.entrySet()) {
// System.out.print(i.getKey() + " ");

// }
// }

// private static int[] merge(int[] array1, int[] array2, int n2, int m2) {
// int n = array1.length, m = array2.length;
// int[] sortedArray = new int[n + m]; // new array create
// // Indexes into array1, array2, and sortedArray
// int array1Ptr = 0, array2Ptr = 0, sortedArrayIdx = 0;
// // Collect the elements of array1 and array2 in order
// while (array1Ptr < n && array2Ptr < m) {
// // Transfer smaller element to sortedArray
// if (array1[array1Ptr] < array2[array2Ptr]) {
// sortedArray[sortedArrayIdx++] = array1[array1Ptr++];
// } else {
// sortedArray[sortedArrayIdx++] = array2[array2Ptr++];
// }
// }
// // Transfer elements remaining in either array1 or array2
// // to the resulting sortedArray
// while (array1Ptr < n) {
// sortedArray[sortedArrayIdx++] = array1[array1Ptr++];
// }
// while (array2Ptr < m) {
// sortedArray[sortedArrayIdx++] = array2[array2Ptr++];
// }

// return sortedArray;
// }
// // merge 2 sorted arrays

// public static void main(String[] args) {
// int[] array1 = { 10, 17, 18, 20 };
// int[] array2 = { 11, 12, 17, 22, 27 };

// int n = array1.length;
// int m = array2.length;
// // int k = 15;

// // mergersorted(array1, array2, n, m);
// System.out.println(Arrays.toString(merge(array1, array2, m, m)));
// }
// }

// class Main {

// public static List<List<Integer>> subsets(int[] arr) {
// HashMap<Integer, Integer> hm = new HashMap<>();

// for (int i = 0; i < arr.length - 2; i++) {
// for (int j = i + 1; j < arr.length - 1; j++) {
// for (int k = j + 1; k < arr.length ; k++) {
// System.out.print(arr[i] + " " + arr[j] + " " + arr[k]);
// System.out.println();

// }

// }

// }

// for (int i = 0; i < arr.length - 1; i++) {
// int j = i + 1; int k = arr.length-1;
// while (j <= k) {
// if(arr[j]+arr[k] > arr[i]){
// System.out.print(arr[i]+" "+arr[j]+" "+arr[k]);
// System.out.println();
// k--;

// }else{
// k--;
// j++;
// }
// }
// }

// List<List<Integer>> res = new ArrayList();

// genrateSubset(0, nums, new ArrayList(), res);

// return res;

// }

// void genrateSubset(int index, int[] nums, List<Integer> curr,
// List<List<Integer>> res) {
// res.add(new ArrayList<>(curr));

// for (int i = index; i < nums.length; i++) {

// curr.add(nums[i]);
// genrateSubset(i+1, nums, curr, res);
// curr.remove(curr.size()- 1);
// }
// }

// public static void triplets(int[] arr, int sum){

// for(int i=0; i<arr.length; i++){
// int j = i+1; int k = arr.length-1;

// while(j < k){
// int sum1 = arr[i]+arr[j]+arr[k];

// if(sum1 == sum){

// System.out.println(arr[i]+" "+arr[j]+" "+arr[k]);
// break;
// }
// if(sum1 >sum){
// k--;
// j++;
// }else{
// j++;
// }
// }
// }
// }

// public static void triplets(int[] arr){

// // for(int i=0; i<arr.length; i++){
// int ans = arr[0];
// int n = arr.length;

// for (int i = 0; i < n; i++) {
// int product = arr[i];

// for(int j = i+1; j < n; j++){
// ans = Math.max(ans,product);
// product *= arr[j];

// }
// ans = Math.max(ans, product);

// }
// System.out.println(ans);

// }

// public static void powerSet(String str, int i, String cstr) {

// if(str.length() == i){
// System.out.print(cstr+" ");
// return;
// }
// powerSet(str, i+1, cstr + str.charAt(i));
// powerSet(str, i+1, cstr);
// }

// public static int weird(int[] arr) {
// int i = 0; int j = arr.length -1 ;
// int maxpro = 1;
// while(i < j) {
// int pro = arr[i]*arr[j];
// if(pro > maxpro) {
// maxpro = pro;
// i++;
// j--;
// }else{
// i++;
// j--;
// }

// }

// return maxpro;
// }

// public static void subset(int n) {
// int n = letters.length;

// if(letters[n - 1] <= target || target < letters) {
// return letters[0];
// }

// int L = 0; int R = n - 1;
// while(L+1 < R) {
// int mid = L + (R - L) / 2;

// if(letters[mid] <= target) {
// L = mid;
// }else {
// R = mid;
// }
// }

// return letters[R];

// if(n == 0) {
// return;
// }

// System.out.println(n);
// subset(n-1);
// }

// public static int Solution(int n , int k) {
// if(n == 0) {
// return 0;
// }

// int x = Solution(n-1, k);
// int y = (x + k) % n;

// return (Solution(n - 1, k) + k - 1) % n + 1;
// }

// public static void main(String[] args) {

// int arr[] = {1,2,3,4,5,6};
// String str = "abc";
// int i = 0;
// String cstr = "";
// int n = 5;
// int k = 3;
// // Arrays.sort(arr);
// // System.out.print(weird(arr));
// int ans = Solution(n, k);

// System.out.println(ans);

// }
// }

// class Main {

//     public static void main(String[] args) {
//         int[] a = { 2, 4, 1, 3, 5 };
//         int n = a.length;

//          Arraya(a, n);
//         // System.out.println(ans);
//     }

//     public static void subsequense(int[] a, int[] b, int k, int n) {
//         if(n == a.length) {
//             return;
//         }

//         subsequense(a, b, k, n);

//     }

//     public static void Arraya(int[] a, int n) {

//         for(int i = 0; i < n; i++) {

//             for (int j = i; j < a.length; j++) {

//                 if(Math.abs(a[i] - a[j]) <= 5){
//                     System.out.println(a[i]+" "+a[j]);
//                 }
//             }
//         }

//     }

//     public static void print(int[] a, int s, int j) {

//         for (int i = s; i < j; i++) {
//             System.out.print(a[i]+ " ");
//         }
//         System.out.println();
//     }

//     // private static int maxdiff(int[] a, int n) {
//     //     int maxdiff, i, j;

//     //     int[] Lmin = new int[n];
//     //     int[] Rmax = new int[n];

//     //     Lmin[0] = a[0];

//     //     for(i = 1; i < n; i ++) {
//     //         Lmin[i] = Math.min(a[i], Lmin[i - 1]);
//     //     }

//     //     Rmax[n-1] = a[n - 1];

//     //     for (j = n - 2; j >=0; j--){
//     //         Rmax[j] = Math.max(a[j], Rmax[j+1]);

//     //     }

//     //     i = 0; j = 0; maxdiff = -1;

//     //     while (j < n && i < n) {
//     //         if(Lmin[i] <= Rmax[j]) {
//     //             maxdiff = Math.max(maxdiff, j - 1);
//     //             j++;
//     //         }else{
//     //             i++;
//     //         }
//     //     }

//     //     if(maxdiff > 0) {

//     //         return maxdiff;
//     //     }
//     //     return -1;

//     // }

//     // // public static int inversionCount(long[] a, int n) {

//     // //     long[] b = new long[n];

//     // //     return mergesort(a, b, 0, n - 1);

//     // // }

//     // // private static long mergesort(long[] a, long[] b, int l, int r) {

//     // //     long count = 0;
//     // //     if (l < r) {
//     // //         int m = (l + r) / 2;

//     // //         count += mergesort(a, b, l, m);
//     // //         count += mergesort(a, b, m + 1, r);

//     // //         count += merge(a, b, l, m, r);
//     // //     }

//     // //     return count;
//     // // }

//     // // private static long merge(long[] a, long[] b, int l, int m, int r) {
//     //     // long inversioncount = 0;
//     //     // int k = l;
//     //     // int i = l, j = m + 1;

//     //     // while (i <= l && j <= r) {
//     //     //     if (a[i] <= a[j]) {
//     //     //         b[k++] = a[i++];
//     //     //     } else {
//     //     //         b[k++] = a[j++];
//     //     //         inversioncount += (m - i + 1);
//     //     //     }

//     //     // }

//     //     // while (i <= m) {
//     //     //     b[k++] = a[i++];
//     //     // }
//     //     // while (j <= r) {
//     //     //     b[k++] = a[j++];
//     // //     }

//     // //     for (int h = l; h <= r; h++) {
//     // //         a[h] = b[h];
//     // //     }
//     // //     return inversioncount;
//     // // }
//     // // static int firstMissingEle(int[] arr){
//     // // int max = 0, n = arr.length;
//     // // for(int i = 0; l < n; l++){
//     // // if(arr[l] < 0)
//     // // arr[l] = 0;
//     // // max = Math.max(max, arr[l]);
//     // // }
//     // // max++;
//     // // for(int l = 0; l < n; l++){
//     // // int val = arr[l] % max;
//     // // if(val > 0 && val <= n){
//     // // arr[val - 1] = arr[val - 1] + max;
//     // // }
//     // // }
//     // // for(int l = 0; l < n; l++){
//     // // if(arr[l] < max)return l + 1;

//     // // private static int duplicate(int[] a, int n) {

//     // // Map<Integer, Integer> mp = new HashMap<Integer,Integer>();

//     // // for(int l = 0; l < n; l++) {
//     // // int key = a[l];

//     // // if(mp.containsKey(key)) {
//     // // int frq = mp.get(key);

//     // // frq++;

//     // mp.put(key, frq);
//     // }
//     // else{
//     // mp.put(key, 1);
//     // }

//     // }

//     // int max_count = 0, res = - 1;

//     // for(Map.Entry<Integer, Integer> l : mp.entrySet()) {

//     // if(max_count < l.getValue()) {
//     // res = l.getKey();
//     // max_count = l.getValue();
//     // }
//     // }
//     // return res;
// }

// /*package whatever //do not write package name here */

// import java.io.*;
// import java.util.*;

// class GFG {
//     static boolean isvalid(String str) {
//         int n = str.length();
//         Stack<Character> st = new Stack<Character>();

//         for (int i = 0; i < n; i++) {
//             char ch = str.charAt(i);
//             if (ch == '(' || ch == '{' || ch == '[') {
//                 st.push(ch);

//             } else {
//                 if (st.empty() == true) {
//                     return false;
//                 }
//                 if (ch == ')' && st.peek() == '(') {
//                     st.pop();
//                 }else if(ch == '}' && st.peek() == '{') {
//                     st.pop();
//                 }else if(ch == ']' && st.peek() == '[') {
//                     st.pop();
//                 }else{
//                     return false;
//                 }

//             }
//         }
//         if (st.empty() == true) {
//             return true;
//         }

//         return false;

//     }

//     public static int[] nextgreater(int[] arr) {

//         int n = arr.length;
//         int[] new_Arr = new int[n];

//         Stack<Integer> st = new Stack<>();

//         for (int i = 0; i < n; i++) {
//             if(st.empty() == true) {
//                 st.push(i);
//             }else{
//                 while(st.empty() == false && arr[st.peek()] < arr[i]) {
//                     int top = st.pop();
//                     new_Arr[top] = arr[i];
//                 }
//                 st.push(i);
//             }
//         }

//         while (st.empty() == false) {
//             int top = st.pop();
//             new_Arr[top] = -1;
//         }
//         return new_Arr;
//     }

//     public static void main(String[] args) {

//         String str = "(){}[][][][][][]({{{{}}}}";
//         int[] arr = {12,5,4,9,112,5,4,5,44};

//         boolean ans = isvalid(str);
//         int[] ans1 = nextgreater(arr);
//         // System.out.print(ans);

//         for (int i : ans1) {
//             System.out.print(i+" ");
//         }

//     }
// }

/**
 * Main
 */

// sorting arr using hashing ans by value;

// import java.util.*;

// public class Main {

// public static void main(String[] args) {
// Integer[] arr = new Integer[] { 1,2,3,4,5,6,7,8,9,10,11,12};

// HashMap<Integer, Integer> mp = new HashMap<>();

// for (int i = 0; i < arr.length; i++) {
// // if (mp.containsKey(arr[i])) {
// // mp.put(arr[i], mp.get(arr[i]) + 1);
// // } else {
// // mp.put(arr[i], 1);
// // }

// mp.put(arr[i], i);
// }

// Pair[] arrPair = new Pair[mp.size()];

// int i = 0;
// for (int key : mp.keySet()) {
// arrPair[i] = new Pair(key, mp.get(key));
// i++;
// }

// Arrays.sort(arrPair, new SortUsingComparator());
// for (Pair ele : arrPair) {
// System.out.print(ele.x+" ");
// }
// }

// }

// /**
// * Pair
// */
// class Pair {
// int x, y;

// Pair(int a, int b) {
// x = a;
// y = b;
// }

// }

// /**
// * SortUsingComparator
// */
// class SortUsingComparator implements Comparator<Pair> {

// public int compare(Pair p1, Pair p2) {
// // when you want to sort by using value
// // if(p1.y == p2.y){
// // return p2.y - p1.y;
// // }
// // when you want sort by index % 10;
// return p1.y % 10 - p2.y % 10;
// }

// }

// class Main {

// public static Node addElement(Node head, int k, int pos) {
// Node temp = head;

// while (temp != null && temp.val != pos) {
// temp = temp.next;
// }
// if (temp == null) {
// return head;
// } else {
// Node newNode = new Node(k);
// newNode = temp.next;
// temp.next = newNode;

// }

// return head;
// }

// public static void main(String[] args) {

// Node head = null;
// head = add(head, 10);
// head = add(head, 2);
// head = add(head, 20);
// head = add(head, 32);
// head = add(head, 25);
// // head = addElement(head, 3, 2);
// ReverseLinkedList(head);
// print(head);
// // System.out.println(addElement(head, 3, 20));
// System.out.println(head);
//     // addElement(head, 54, 2);
//     int n = 6;
//     int counter = 0;
//     int[] res = new int[n + 1];

//     // int ans = fibbousingdp(n, res);
//     // System.out.println(ans);
// }

// private static int fibbousingdp(int n, int[] res) {

// if (n == 0 || n == 1) {
// return n;
// }

// if(res[n] != 0) {
// return res[n];
// }
// System.out.println("hewl "+n);
// int ans = fibbousingdp(n - 1, res) + fibbousingdp(n - 2, res);
// res[n] = ans;

// return ans;
// }

/*
 * class Node {
 * Node next;
 * int data;
 * 
 * Node(int data) {
 * this.data = data;
 * next = null;
 * }
 * }
 */

// public static Node reverse(Node head) {
//     Node tmp = head, pre = null, next = null;
//     while (tmp != null) {
//         next = tmp.next;
//         tmp.next = pre;
//         pre = tmp;
//         tmp = next;
//     }
//     head = pre;
//     return head;
// }

// public static Node addNumber(Node first, Node second) {

//     first = reverse(first);
//     second = reverse(second);
//     int sum = 0;
//     int carry = 0;
//     Node temp;
//     Node curr = null;
//     Node res = null;

//     while (first != null || second != null) {
//         // sum = carry + (first ? first.data : 0) + (second ? second.data : 0);
//         sum = carry + first.data + second.data;
//         carry = (sum >= 10) ? 1 : 0;
//         sum = sum % 10;

//         temp = new Node(sum);
//         if (res == null)
//             res = temp;
//         else
//             curr.next = temp;
//         curr = temp;
//         if (first != null)
//             first = first.next;
//         if (second != null)
//             second = second.next;

//     }
//     if (carry > 0) {
//         temp = new Node(carry);
//         curr.next = temp;
//         curr = temp;
//     }
//     res = reverse(res);
//     return res;
// }

// public static Node ReverseLinkedList(Node head) {
// if (head == null) {
// return head;
// }
// ReverseLinkedList(head.next);
// System.out.print(head.val + " ");

// return null;
// }

// private static void print(Node head) {
// Node temp = head;
// while (temp != null) {
// System.out.print(temp.val + " ");
// temp = temp.next;
// }
// }

// private static Node add(Node head, int i) {
// Node newNode = new Node(i);
// if (head == null) {
// head = newNode;
// return head;
// }

// Node temp = head;
// while (temp.next != null) {
// temp = temp.next;
// }
// temp.next = newNode;
// return head;
//     // }
// }

// class Node {
//     public int data;
//     Node next;
//     int val;

//     Node(int val) {
//         this.val = val;
//         next = null;
//     }
// // }

/**
 * Main
 */

// import java.io.*; // for handling input/output
// import java.util.*; // contains Collections framework

// public class Main {

// //     public static void main(String[] args) {

// //         Scanner s = new Scanner(System.in);
// //         int t = s.nextInt();
// //         while (t != 0) {
// //             int n = s.nextInt();
// //             int w = s.nextInt();

// //             int[] vals = new int[n];
// //             for (int i = 0; i < n; i++) {
// //                 vals[i] = s.nextInt();

// //             }
// //             int[] wts = new int[n];

// //             for (int i = 0; i < n; i++) {
// //                 wts[i] = s.nextInt();
// //             }

// //             int[][] dp = new int[n + 1][w + 1];

// //             for (int i = 1; i < dp.length; i++) {
// //                 for (int j = 1; j < dp[0].length; j++) {
// //                     if (j >= wts[i - 1]) {
// //                         int rcap = j - wts[i - 1];
// //                         if (dp[i - 1][rcap] + vals[i - 1] > dp[i - 1][j]) {
// //                             dp[i][j] = dp[i - 1][rcap] + vals[i - 1];
// //                         } else {
// //                             dp[i][j] = dp[i - 1][j];
// //                         }
// //                     } else {
// //                         dp[i][j] = dp[i - 1][j];
// //                     }
// //                 }
// //             }
// //             System.out.print(dp[n][w]);

// //         }
// //     }

// // }

// import java.util.HashSet;
// import java.util.Queue;
// import java.util.Set;
// import java.util.Stack;

// // A Linked List Node
// class Node {
//     int data;
//     Node next;

//     Node(int data, Node next) {
//         this.data = data;
//         this.next = next;
//     }

// }

// class Main {
//     // Function to detect a cycle in a linked list using hashing
//     public boolean detectCycle(Node head) {

// if (head == null) {
// return false;
// }

// Node slow = head;
// Node fast = head.next;
// while (slow != fast) {
// if (fast == null || fast.next == null) {
// return false;
// }
// slow = slow.next;
// fast = fast.next.next;
// }
// return true;

//         Set<Node> mp = new HashSet<>();
//         while (head != null) {
//             if (mp.contains(head)) {
//                 return true;
//             }
//             mp.add(head);
//             head = head.next;
//         }
//         return false;
//     }

//     public static void main(String[] args) {
//         // input keys
//         int[] keys = { 1, 2, 3, 4, 8};

//         Node head = null;
//         for (int i = keys.length - 1; i >= 0; i--) {
//             head = new Node(keys[i], head);
//         }

//         // insert cycle
//         // head.next.next.next.next.next = head.next.next;

//         if (detectCycle(head) == true) {
//             System.out.println("Cycle Found");
//         } else {
//             System.out.println("No Cycle Found");
//         }
//     }

// }

// import java.util.*;

// class Queues {

//     static Stack<Integer> s1 = new Stack<>();
//     static Stack<Integer> s2 = new Stack<>();

//     static void enQueue(int x) {
//         while(!s1.isEmpty()) {
//             s2.push(s1.pop());
//         }
//         s1.push(x);

//         while (!s2.isEmpty()) {
//             s1.push(s2.pop());
//         }
//     }

//     static int deQueue() {
//         if(s1.isEmpty()) {
//             System.out.print("Q is empty");;

//         }

//         int x = s1.peek();
//         s1.pop();
//         return x;
//     }
//     public static void main(String[] args) {

//         Queues q = new Queues();
//         q.enQueue(1);
//         q.enQueue(6);
//         q.enQueue(8);

//         System.out.println(q.deQueue());

//     }
// }

/**
 * Main
 */
public class Main {

    // public static void main(String[] args) {
    // int n = 5;
    // int ans = climbingstrai(n);
    // // System.out.println(ans);

    // String stb = "";
    // // System.out.println(posssibleWord(stb));
    // ArrayList<String> resultArrayList = posssibleWord(stb);
    // for (String iterable_element : resultArrayList) {
    // System.out.print(iterable_element + " ");

    // }
    // }

    static boolean isWord(String str, String[] dictionary) {
        // Linearly search all words
        for (int i = 0; i < str.length(); i++)
            if (str.equals(dictionary[i]))
                return true;
        return false;
    }

    // A recursive function to print all words present on boggle
    static void findWordsUtil(char boggle[][], String[] dictionary, int M, int N, boolean visited[][], int i, int j,
            String str) {
        // Mark current cell as visited and append current character
        // to str
        visited[i][j] = true;
        str = str + boggle[i][j];

        // If str is present in dictionary, then print it
        if (isWord(str, dictionary))
            System.out.println(str);

        // Traverse 8 adjacent cells of boggle[i][j]
        for (int row = i - 1; row <= i + 1 && row < M; row++)
            for (int col = j - 1; col <= j + 1 && col < N; col++)
                if (row >= 0 && col >= 0 && !visited[row][col])
                    findWordsUtil(boggle, dictionary, M, N, visited, row, col, str);

        // Erase current character from string and mark visited
        // of current cell as false
        str = "" + str.charAt(str.length() - 1);
        visited[i][j] = false;
    }

    // Prints all words present in dictionary.
    static void findWords(char boggle[][], String[] dictionary, int M, int N, int ii, int jj) {
        // Mark all characters as not visited

        boolean visited[][] = new boolean[M][N];

        // Initialize current string
        String str = "";

        // Consider every character and look for all words
        // starting with this character
        for (int i = 0; i < M; i++)
            for (int j = 0; j < N; j++)
                findWordsUtil(boggle, dictionary, M, N, visited, i, j, str);
    }

    public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        int input = s.nextInt();
        String dictionary[] = new String[input];
        for (int i = 0; i < input; i++) {
            dictionary[i] = s.next();
        }
        int n = dictionary.length;
        int M = s.nextInt(), N = s.nextInt();

        char boggle[][] = new char[M][N];

        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                boggle[i][j] = s.next().charAt(0);
            }
        }

        findWords(boggle, dictionary, M, N, 0, 0);
    }

    static String[] mainCodeString = { " ", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };

    public static ArrayList<String> posssibleWord(String stb) {

        if (stb.length() == 0) {
            ArrayList<String> baseres = new ArrayList<>();
            baseres.add("");
            return baseres;
        }

        char ch = stb.charAt(0);
        String strremain = stb.substring(1);

        ArrayList<String> recursArrayList = posssibleWord(strremain);

        ArrayList<String> mArrayList = new ArrayList<>();

        String codeString = mainCodeString[ch - '1'];

        for (int i = 0; i < codeString.length(); i++) {

            char chstr = codeString.charAt(i);

            for (String st : recursArrayList) {
                mArrayList.add(chstr + st);
            }

        }
        return mArrayList;

    }

    public static ArrayList<String> list;

    // Function to restore Ip Addresses
    public static ArrayList<String> restoreIpAddresses(String s) {
        int n = s.length();
        list = new ArrayList<>();
        if (n < 4 || n > 12)
            return list;

        // initialize the dp array
        int dp[][] = new int[4][n];
        for (int i = 0; i < 4; i++) {
            for (int j = n - 1; j >= 0; j--) {
                if (i == 0) {
                    // take the substring
                    String sub = s.substring(j);
                    if (isValid(sub)) {
                        dp[i][j] = 1;
                    } else if (j < n - 3) {
                        break;
                    }
                } else {
                    if (j <= n - i) {
                        for (int k = 1; k <= 3 && j + k <= n; k++) {
                            String temp = s.substring(j, j + k);
                            if (isValid(temp)) {
                                if (j + k < n
                                        && dp[i - 1][j + k] == 1) {
                                    dp[i][j] = 1;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        if (dp[3][0] == 0)
            return list;

        // Call function createIpfromDp
        createIpFromDp(dp, 3, 0, s, "");
        return list;
    }

    public static void createIpFromDp(int dp[][],
            int r,
            int c, String s,
            String ans) {
        if (r == 0) {
            ans += s.substring(c);
            list.add(ans);
            return;
        }
        // for (int i = 1; i <= 3 && c + i < s.length(); i++) {
        // if (isValid(s.substring(c, c + i)) && dp[r - 1] == 1) {
        // createIpFromDp(dp, r - 1, c + i, s, ans + s.substring(c, c + i) + ".");
        // }
        // }
    }

    private static boolean isValid(String ip) {
        String a[] = ip.split("[.]");
        for (String s : a) {
            int i = Integer.parseInt(s);
            if (s.length() > 3 || i < 0 || i > 255) {
                return false;
            }
            if (s.length() > 1 && i == 0)
                return false;
            if (s.length() > 1 && i != 0
                    && s.charAt(0) == '0')
                return false;
        }

        return true;
    }

    private static int climbingstrai(int n) {
        int[] dp = new int[n + 1];

        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (i == 1) {
                dp[i] = dp[i - 1];
            } else if (i == 2) {
                dp[i] = dp[i - 1] + dp[i - 2];
            } else {
                dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];

            }

        }
        return dp[n];

    }

    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 1;

        for (int i = 0; i <= amount; i++) {
            for (int j = 0; j < coins.length; j++) {
                if (i - coins[j] >= 0 && dp[i - coins[j]] != Integer.MAX_VALUE) {
                    dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);
                }
            }
        }
        return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];

    }

    public List<List<Integer>> genrate(int numRows) {
        List<List<Integer>> res = new ArrayList<>();

        if (numRows == 0) {
            return res;
        }

        res.add(new ArrayList<>());
        res.get(0).add(1);

        for (int i = 1; i < numRows; i++) {
            List<Integer> curr = new ArrayList<>();
            curr.add(1);

            for (int j = 1; j < i; j++) {
                curr.add(res.get(i - 1).get(j - 1) + res.get(i - 1).get(j));
            }

            curr.add(1);
            res.add(curr);
        }
        return res;

    }
}